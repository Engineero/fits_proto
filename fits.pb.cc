// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fits.proto

#include "fits.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace fits_proto {
PROTOBUF_CONSTEXPR KeywordData::KeywordData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.comment_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.value_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct KeywordDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR KeywordDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~KeywordDataDefaultTypeInternal() {}
  union {
    KeywordData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 KeywordDataDefaultTypeInternal _KeywordData_default_instance_;
PROTOBUF_CONSTEXPR FitsHeader_KeywordsEntry_DoNotUse::FitsHeader_KeywordsEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct FitsHeader_KeywordsEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FitsHeader_KeywordsEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FitsHeader_KeywordsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    FitsHeader_KeywordsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FitsHeader_KeywordsEntry_DoNotUseDefaultTypeInternal _FitsHeader_KeywordsEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR FitsHeader::FitsHeader(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.size_)*/{}
  , /*decltype(_impl_._size_cached_byte_size_)*/{0}
  , /*decltype(_impl_.keywords_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.comment_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.history_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.extension_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.simple_)*/false
  , /*decltype(_impl_.bitpix_)*/0
  , /*decltype(_impl_.n_extensions_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FitsHeaderDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FitsHeaderDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FitsHeaderDefaultTypeInternal() {}
  union {
    FitsHeader _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FitsHeaderDefaultTypeInternal _FitsHeader_default_instance_;
PROTOBUF_CONSTEXPR FitsHdu_FloatData::FitsHdu_FloatData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FitsHdu_FloatDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FitsHdu_FloatDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FitsHdu_FloatDataDefaultTypeInternal() {}
  union {
    FitsHdu_FloatData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FitsHdu_FloatDataDefaultTypeInternal _FitsHdu_FloatData_default_instance_;
PROTOBUF_CONSTEXPR FitsHdu_DoubleData::FitsHdu_DoubleData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FitsHdu_DoubleDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FitsHdu_DoubleDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FitsHdu_DoubleDataDefaultTypeInternal() {}
  union {
    FitsHdu_DoubleData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FitsHdu_DoubleDataDefaultTypeInternal _FitsHdu_DoubleData_default_instance_;
PROTOBUF_CONSTEXPR FitsHdu_Int32Data::FitsHdu_Int32Data(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_)*/{}
  , /*decltype(_impl_._data_cached_byte_size_)*/{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FitsHdu_Int32DataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FitsHdu_Int32DataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FitsHdu_Int32DataDefaultTypeInternal() {}
  union {
    FitsHdu_Int32Data _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FitsHdu_Int32DataDefaultTypeInternal _FitsHdu_Int32Data_default_instance_;
PROTOBUF_CONSTEXPR FitsHdu_Int64Data::FitsHdu_Int64Data(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_)*/{}
  , /*decltype(_impl_._data_cached_byte_size_)*/{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FitsHdu_Int64DataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FitsHdu_Int64DataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FitsHdu_Int64DataDefaultTypeInternal() {}
  union {
    FitsHdu_Int64Data _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FitsHdu_Int64DataDefaultTypeInternal _FitsHdu_Int64Data_default_instance_;
PROTOBUF_CONSTEXPR FitsHdu_SInt32Data::FitsHdu_SInt32Data(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_)*/{}
  , /*decltype(_impl_._data_cached_byte_size_)*/{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FitsHdu_SInt32DataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FitsHdu_SInt32DataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FitsHdu_SInt32DataDefaultTypeInternal() {}
  union {
    FitsHdu_SInt32Data _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FitsHdu_SInt32DataDefaultTypeInternal _FitsHdu_SInt32Data_default_instance_;
PROTOBUF_CONSTEXPR FitsHdu_SInt64Data::FitsHdu_SInt64Data(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_)*/{}
  , /*decltype(_impl_._data_cached_byte_size_)*/{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FitsHdu_SInt64DataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FitsHdu_SInt64DataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FitsHdu_SInt64DataDefaultTypeInternal() {}
  union {
    FitsHdu_SInt64Data _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FitsHdu_SInt64DataDefaultTypeInternal _FitsHdu_SInt64Data_default_instance_;
PROTOBUF_CONSTEXPR FitsHdu::FitsHdu(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.header_)*/{}
  , /*decltype(_impl_.payload_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct FitsHduDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FitsHduDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FitsHduDefaultTypeInternal() {}
  union {
    FitsHdu _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FitsHduDefaultTypeInternal _FitsHdu_default_instance_;
PROTOBUF_CONSTEXPR Fits::Fits(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.hdu_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FitsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FitsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FitsDefaultTypeInternal() {}
  union {
    Fits _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FitsDefaultTypeInternal _Fits_default_instance_;
}  // namespace fits_proto
static ::_pb::Metadata file_level_metadata_fits_2eproto[11];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_fits_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_fits_2eproto = nullptr;

const uint32_t TableStruct_fits_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fits_proto::KeywordData, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::fits_proto::KeywordData, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::fits_proto::KeywordData, _impl_.comment_),
  PROTOBUF_FIELD_OFFSET(::fits_proto::KeywordData, _impl_.value_),
  PROTOBUF_FIELD_OFFSET(::fits_proto::FitsHeader_KeywordsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fits_proto::FitsHeader_KeywordsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::fits_proto::FitsHeader_KeywordsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::fits_proto::FitsHeader_KeywordsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fits_proto::FitsHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::fits_proto::FitsHeader, _impl_.simple_),
  PROTOBUF_FIELD_OFFSET(::fits_proto::FitsHeader, _impl_.bitpix_),
  PROTOBUF_FIELD_OFFSET(::fits_proto::FitsHeader, _impl_.size_),
  PROTOBUF_FIELD_OFFSET(::fits_proto::FitsHeader, _impl_.comment_),
  PROTOBUF_FIELD_OFFSET(::fits_proto::FitsHeader, _impl_.history_),
  PROTOBUF_FIELD_OFFSET(::fits_proto::FitsHeader, _impl_.n_extensions_),
  PROTOBUF_FIELD_OFFSET(::fits_proto::FitsHeader, _impl_.extension_),
  PROTOBUF_FIELD_OFFSET(::fits_proto::FitsHeader, _impl_.keywords_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fits_proto::FitsHdu_FloatData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::fits_proto::FitsHdu_FloatData, _impl_.data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fits_proto::FitsHdu_DoubleData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::fits_proto::FitsHdu_DoubleData, _impl_.data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fits_proto::FitsHdu_Int32Data, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::fits_proto::FitsHdu_Int32Data, _impl_.data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fits_proto::FitsHdu_Int64Data, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::fits_proto::FitsHdu_Int64Data, _impl_.data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fits_proto::FitsHdu_SInt32Data, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::fits_proto::FitsHdu_SInt32Data, _impl_.data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fits_proto::FitsHdu_SInt64Data, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::fits_proto::FitsHdu_SInt64Data, _impl_.data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fits_proto::FitsHdu, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::fits_proto::FitsHdu, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::fits_proto::FitsHdu, _impl_.header_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::fits_proto::FitsHdu, _impl_.payload_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fits_proto::Fits, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::fits_proto::Fits, _impl_.hdu_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::fits_proto::KeywordData)},
  { 16, 24, -1, sizeof(::fits_proto::FitsHeader_KeywordsEntry_DoNotUse)},
  { 26, -1, -1, sizeof(::fits_proto::FitsHeader)},
  { 40, -1, -1, sizeof(::fits_proto::FitsHdu_FloatData)},
  { 47, -1, -1, sizeof(::fits_proto::FitsHdu_DoubleData)},
  { 54, -1, -1, sizeof(::fits_proto::FitsHdu_Int32Data)},
  { 61, -1, -1, sizeof(::fits_proto::FitsHdu_Int64Data)},
  { 68, -1, -1, sizeof(::fits_proto::FitsHdu_SInt32Data)},
  { 75, -1, -1, sizeof(::fits_proto::FitsHdu_SInt64Data)},
  { 82, -1, -1, sizeof(::fits_proto::FitsHdu)},
  { 96, -1, -1, sizeof(::fits_proto::Fits)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::fits_proto::_KeywordData_default_instance_._instance,
  &::fits_proto::_FitsHeader_KeywordsEntry_DoNotUse_default_instance_._instance,
  &::fits_proto::_FitsHeader_default_instance_._instance,
  &::fits_proto::_FitsHdu_FloatData_default_instance_._instance,
  &::fits_proto::_FitsHdu_DoubleData_default_instance_._instance,
  &::fits_proto::_FitsHdu_Int32Data_default_instance_._instance,
  &::fits_proto::_FitsHdu_Int64Data_default_instance_._instance,
  &::fits_proto::_FitsHdu_SInt32Data_default_instance_._instance,
  &::fits_proto::_FitsHdu_SInt64Data_default_instance_._instance,
  &::fits_proto::_FitsHdu_default_instance_._instance,
  &::fits_proto::_Fits_default_instance_._instance,
};

const char descriptor_table_protodef_fits_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\nfits.proto\022\nfits_proto\"\322\001\n\013KeywordData"
  "\022\024\n\nstring_val\030\001 \001(\tH\000\022\023\n\tint32_val\030\002 \001("
  "\005H\000\022\024\n\nsint32_val\030\003 \001(\021H\000\022\023\n\tint64_val\030\004"
  " \001(\003H\000\022\024\n\nsint64_val\030\005 \001(\022H\000\022\023\n\tfloat_va"
  "l\030\006 \001(\002H\000\022\024\n\ndouble_val\030\007 \001(\001H\000\022\022\n\010bool_"
  "val\030\010 \001(\010H\000\022\017\n\007comment\030\t \001(\tB\007\n\005value\"\207\002"
  "\n\nFitsHeader\022\016\n\006simple\030\001 \001(\010\022\016\n\006bitpix\030\002"
  " \001(\005\022\014\n\004size\030\003 \003(\005\022\017\n\007comment\030\004 \001(\t\022\017\n\007h"
  "istory\030\005 \001(\t\022\024\n\014n_extensions\030\006 \001(\005\022\021\n\tex"
  "tension\030\007 \001(\t\0226\n\010keywords\030\010 \003(\0132$.fits_p"
  "roto.FitsHeader.KeywordsEntry\032H\n\rKeyword"
  "sEntry\022\013\n\003key\030\001 \001(\t\022&\n\005value\030\002 \001(\0132\027.fit"
  "s_proto.KeywordData:\0028\001\"\245\004\n\007FitsHdu\022&\n\006h"
  "eader\030\001 \003(\0132\026.fits_proto.FitsHeader\0223\n\nf"
  "loat_data\030\002 \001(\0132\035.fits_proto.FitsHdu.Flo"
  "atDataH\000\0225\n\013double_data\030\003 \001(\0132\036.fits_pro"
  "to.FitsHdu.DoubleDataH\000\0223\n\nint32_data\030\004 "
  "\001(\0132\035.fits_proto.FitsHdu.Int32DataH\000\0223\n\n"
  "int64_data\030\005 \001(\0132\035.fits_proto.FitsHdu.In"
  "t64DataH\000\0225\n\013sint32_data\030\006 \001(\0132\036.fits_pr"
  "oto.FitsHdu.SInt32DataH\000\0225\n\013sint64_data\030"
  "\007 \001(\0132\036.fits_proto.FitsHdu.SInt64DataH\000\032"
  "\031\n\tFloatData\022\014\n\004data\030\001 \003(\002\032\032\n\nDoubleData"
  "\022\014\n\004data\030\001 \003(\001\032\031\n\tInt32Data\022\014\n\004data\030\001 \003("
  "\005\032\031\n\tInt64Data\022\014\n\004data\030\001 \003(\003\032\032\n\nSInt32Da"
  "ta\022\014\n\004data\030\001 \003(\021\032\032\n\nSInt64Data\022\014\n\004data\030\001"
  " \003(\022B\t\n\007payload\"(\n\004Fits\022 \n\003hdu\030\001 \003(\0132\023.f"
  "its_proto.FitsHduBL\n\034com.engineerolabs.f"
  "its_protoB\tFitsProto\252\002 EngineeroLabs.Pro"
  "tobuf.FitsProtob\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_fits_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_fits_2eproto = {
    false, false, 1183, descriptor_table_protodef_fits_2eproto,
    "fits.proto",
    &descriptor_table_fits_2eproto_once, nullptr, 0, 11,
    schemas, file_default_instances, TableStruct_fits_2eproto::offsets,
    file_level_metadata_fits_2eproto, file_level_enum_descriptors_fits_2eproto,
    file_level_service_descriptors_fits_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_fits_2eproto_getter() {
  return &descriptor_table_fits_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_fits_2eproto(&descriptor_table_fits_2eproto);
namespace fits_proto {

// ===================================================================

class KeywordData::_Internal {
 public:
};

KeywordData::KeywordData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:fits_proto.KeywordData)
}
KeywordData::KeywordData(const KeywordData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  KeywordData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.comment_){}
    , decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.comment_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.comment_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_comment().empty()) {
    _this->_impl_.comment_.Set(from._internal_comment(), 
      _this->GetArenaForAllocation());
  }
  clear_has_value();
  switch (from.value_case()) {
    case kStringVal: {
      _this->_internal_set_string_val(from._internal_string_val());
      break;
    }
    case kInt32Val: {
      _this->_internal_set_int32_val(from._internal_int32_val());
      break;
    }
    case kSint32Val: {
      _this->_internal_set_sint32_val(from._internal_sint32_val());
      break;
    }
    case kInt64Val: {
      _this->_internal_set_int64_val(from._internal_int64_val());
      break;
    }
    case kSint64Val: {
      _this->_internal_set_sint64_val(from._internal_sint64_val());
      break;
    }
    case kFloatVal: {
      _this->_internal_set_float_val(from._internal_float_val());
      break;
    }
    case kDoubleVal: {
      _this->_internal_set_double_val(from._internal_double_val());
      break;
    }
    case kBoolVal: {
      _this->_internal_set_bool_val(from._internal_bool_val());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:fits_proto.KeywordData)
}

inline void KeywordData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.comment_){}
    , decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  _impl_.comment_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.comment_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  clear_has_value();
}

KeywordData::~KeywordData() {
  // @@protoc_insertion_point(destructor:fits_proto.KeywordData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void KeywordData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.comment_.Destroy();
  if (has_value()) {
    clear_value();
  }
}

void KeywordData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void KeywordData::clear_value() {
// @@protoc_insertion_point(one_of_clear_start:fits_proto.KeywordData)
  switch (value_case()) {
    case kStringVal: {
      _impl_.value_.string_val_.Destroy();
      break;
    }
    case kInt32Val: {
      // No need to clear
      break;
    }
    case kSint32Val: {
      // No need to clear
      break;
    }
    case kInt64Val: {
      // No need to clear
      break;
    }
    case kSint64Val: {
      // No need to clear
      break;
    }
    case kFloatVal: {
      // No need to clear
      break;
    }
    case kDoubleVal: {
      // No need to clear
      break;
    }
    case kBoolVal: {
      // No need to clear
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = VALUE_NOT_SET;
}


void KeywordData::Clear() {
// @@protoc_insertion_point(message_clear_start:fits_proto.KeywordData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.comment_.ClearToEmpty();
  clear_value();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* KeywordData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string string_val = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_string_val();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "fits_proto.KeywordData.string_val"));
        } else
          goto handle_unusual;
        continue;
      // int32 int32_val = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _internal_set_int32_val(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint32 sint32_val = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _internal_set_sint32_val(::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 int64_val = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _internal_set_int64_val(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint64 sint64_val = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _internal_set_sint64_val(::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float float_val = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _internal_set_float_val(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // double double_val = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 57)) {
          _internal_set_double_val(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // bool bool_val = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _internal_set_bool_val(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string comment = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_comment();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "fits_proto.KeywordData.comment"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* KeywordData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fits_proto.KeywordData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string string_val = 1;
  if (_internal_has_string_val()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_string_val().data(), static_cast<int>(this->_internal_string_val().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "fits_proto.KeywordData.string_val");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_string_val(), target);
  }

  // int32 int32_val = 2;
  if (_internal_has_int32_val()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_int32_val(), target);
  }

  // sint32 sint32_val = 3;
  if (_internal_has_sint32_val()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(3, this->_internal_sint32_val(), target);
  }

  // int64 int64_val = 4;
  if (_internal_has_int64_val()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_int64_val(), target);
  }

  // sint64 sint64_val = 5;
  if (_internal_has_sint64_val()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt64ToArray(5, this->_internal_sint64_val(), target);
  }

  // float float_val = 6;
  if (_internal_has_float_val()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_float_val(), target);
  }

  // double double_val = 7;
  if (_internal_has_double_val()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(7, this->_internal_double_val(), target);
  }

  // bool bool_val = 8;
  if (_internal_has_bool_val()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_bool_val(), target);
  }

  // string comment = 9;
  if (!this->_internal_comment().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_comment().data(), static_cast<int>(this->_internal_comment().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "fits_proto.KeywordData.comment");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_comment(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fits_proto.KeywordData)
  return target;
}

size_t KeywordData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fits_proto.KeywordData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string comment = 9;
  if (!this->_internal_comment().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_comment());
  }

  switch (value_case()) {
    // string string_val = 1;
    case kStringVal: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_string_val());
      break;
    }
    // int32 int32_val = 2;
    case kInt32Val: {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_int32_val());
      break;
    }
    // sint32 sint32_val = 3;
    case kSint32Val: {
      total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_sint32_val());
      break;
    }
    // int64 int64_val = 4;
    case kInt64Val: {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_int64_val());
      break;
    }
    // sint64 sint64_val = 5;
    case kSint64Val: {
      total_size += ::_pbi::WireFormatLite::SInt64SizePlusOne(this->_internal_sint64_val());
      break;
    }
    // float float_val = 6;
    case kFloatVal: {
      total_size += 1 + 4;
      break;
    }
    // double double_val = 7;
    case kDoubleVal: {
      total_size += 1 + 8;
      break;
    }
    // bool bool_val = 8;
    case kBoolVal: {
      total_size += 1 + 1;
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData KeywordData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    KeywordData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*KeywordData::GetClassData() const { return &_class_data_; }


void KeywordData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<KeywordData*>(&to_msg);
  auto& from = static_cast<const KeywordData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:fits_proto.KeywordData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_comment().empty()) {
    _this->_internal_set_comment(from._internal_comment());
  }
  switch (from.value_case()) {
    case kStringVal: {
      _this->_internal_set_string_val(from._internal_string_val());
      break;
    }
    case kInt32Val: {
      _this->_internal_set_int32_val(from._internal_int32_val());
      break;
    }
    case kSint32Val: {
      _this->_internal_set_sint32_val(from._internal_sint32_val());
      break;
    }
    case kInt64Val: {
      _this->_internal_set_int64_val(from._internal_int64_val());
      break;
    }
    case kSint64Val: {
      _this->_internal_set_sint64_val(from._internal_sint64_val());
      break;
    }
    case kFloatVal: {
      _this->_internal_set_float_val(from._internal_float_val());
      break;
    }
    case kDoubleVal: {
      _this->_internal_set_double_val(from._internal_double_val());
      break;
    }
    case kBoolVal: {
      _this->_internal_set_bool_val(from._internal_bool_val());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void KeywordData::CopyFrom(const KeywordData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fits_proto.KeywordData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeywordData::IsInitialized() const {
  return true;
}

void KeywordData::InternalSwap(KeywordData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.comment_, lhs_arena,
      &other->_impl_.comment_, rhs_arena
  );
  swap(_impl_.value_, other->_impl_.value_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata KeywordData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fits_2eproto_getter, &descriptor_table_fits_2eproto_once,
      file_level_metadata_fits_2eproto[0]);
}

// ===================================================================

FitsHeader_KeywordsEntry_DoNotUse::FitsHeader_KeywordsEntry_DoNotUse() {}
FitsHeader_KeywordsEntry_DoNotUse::FitsHeader_KeywordsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void FitsHeader_KeywordsEntry_DoNotUse::MergeFrom(const FitsHeader_KeywordsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata FitsHeader_KeywordsEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fits_2eproto_getter, &descriptor_table_fits_2eproto_once,
      file_level_metadata_fits_2eproto[1]);
}

// ===================================================================

class FitsHeader::_Internal {
 public:
};

FitsHeader::FitsHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &FitsHeader::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:fits_proto.FitsHeader)
}
FitsHeader::FitsHeader(const FitsHeader& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FitsHeader* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.size_){from._impl_.size_}
    , /*decltype(_impl_._size_cached_byte_size_)*/{0}
    , /*decltype(_impl_.keywords_)*/{}
    , decltype(_impl_.comment_){}
    , decltype(_impl_.history_){}
    , decltype(_impl_.extension_){}
    , decltype(_impl_.simple_){}
    , decltype(_impl_.bitpix_){}
    , decltype(_impl_.n_extensions_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.keywords_.MergeFrom(from._impl_.keywords_);
  _impl_.comment_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.comment_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_comment().empty()) {
    _this->_impl_.comment_.Set(from._internal_comment(), 
      _this->GetArenaForAllocation());
  }
  _impl_.history_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.history_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_history().empty()) {
    _this->_impl_.history_.Set(from._internal_history(), 
      _this->GetArenaForAllocation());
  }
  _impl_.extension_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.extension_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_extension().empty()) {
    _this->_impl_.extension_.Set(from._internal_extension(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.simple_, &from._impl_.simple_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.n_extensions_) -
    reinterpret_cast<char*>(&_impl_.simple_)) + sizeof(_impl_.n_extensions_));
  // @@protoc_insertion_point(copy_constructor:fits_proto.FitsHeader)
}

inline void FitsHeader::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.size_){arena}
    , /*decltype(_impl_._size_cached_byte_size_)*/{0}
    , /*decltype(_impl_.keywords_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.comment_){}
    , decltype(_impl_.history_){}
    , decltype(_impl_.extension_){}
    , decltype(_impl_.simple_){false}
    , decltype(_impl_.bitpix_){0}
    , decltype(_impl_.n_extensions_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.comment_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.comment_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.history_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.history_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.extension_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.extension_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

FitsHeader::~FitsHeader() {
  // @@protoc_insertion_point(destructor:fits_proto.FitsHeader)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void FitsHeader::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.size_.~RepeatedField();
  _impl_.keywords_.Destruct();
  _impl_.keywords_.~MapField();
  _impl_.comment_.Destroy();
  _impl_.history_.Destroy();
  _impl_.extension_.Destroy();
}

void FitsHeader::ArenaDtor(void* object) {
  FitsHeader* _this = reinterpret_cast< FitsHeader* >(object);
  _this->_impl_.keywords_.Destruct();
}
void FitsHeader::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FitsHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:fits_proto.FitsHeader)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.size_.Clear();
  _impl_.keywords_.Clear();
  _impl_.comment_.ClearToEmpty();
  _impl_.history_.ClearToEmpty();
  _impl_.extension_.ClearToEmpty();
  ::memset(&_impl_.simple_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.n_extensions_) -
      reinterpret_cast<char*>(&_impl_.simple_)) + sizeof(_impl_.n_extensions_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FitsHeader::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool simple = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.simple_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 bitpix = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.bitpix_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_size(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 24) {
          _internal_add_size(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string comment = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_comment();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "fits_proto.FitsHeader.comment"));
        } else
          goto handle_unusual;
        continue;
      // string history = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_history();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "fits_proto.FitsHeader.history"));
        } else
          goto handle_unusual;
        continue;
      // int32 n_extensions = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.n_extensions_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string extension = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_extension();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "fits_proto.FitsHeader.extension"));
        } else
          goto handle_unusual;
        continue;
      // map<string, .fits_proto.KeywordData> keywords = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.keywords_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FitsHeader::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fits_proto.FitsHeader)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool simple = 1;
  if (this->_internal_simple() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_simple(), target);
  }

  // int32 bitpix = 2;
  if (this->_internal_bitpix() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_bitpix(), target);
  }

  // repeated int32 size = 3;
  {
    int byte_size = _impl_._size_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          3, _internal_size(), byte_size, target);
    }
  }

  // string comment = 4;
  if (!this->_internal_comment().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_comment().data(), static_cast<int>(this->_internal_comment().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "fits_proto.FitsHeader.comment");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_comment(), target);
  }

  // string history = 5;
  if (!this->_internal_history().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_history().data(), static_cast<int>(this->_internal_history().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "fits_proto.FitsHeader.history");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_history(), target);
  }

  // int32 n_extensions = 6;
  if (this->_internal_n_extensions() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_n_extensions(), target);
  }

  // string extension = 7;
  if (!this->_internal_extension().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_extension().data(), static_cast<int>(this->_internal_extension().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "fits_proto.FitsHeader.extension");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_extension(), target);
  }

  // map<string, .fits_proto.KeywordData> keywords = 8;
  if (!this->_internal_keywords().empty()) {
    using MapType = ::_pb::Map<std::string, ::fits_proto::KeywordData>;
    using WireHelper = FitsHeader_KeywordsEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_keywords();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "fits_proto.FitsHeader.KeywordsEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(8, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(8, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fits_proto.FitsHeader)
  return target;
}

size_t FitsHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fits_proto.FitsHeader)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 size = 3;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.size_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._size_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // map<string, .fits_proto.KeywordData> keywords = 8;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_keywords_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::fits_proto::KeywordData >::const_iterator
      it = this->_internal_keywords().begin();
      it != this->_internal_keywords().end(); ++it) {
    total_size += FitsHeader_KeywordsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string comment = 4;
  if (!this->_internal_comment().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_comment());
  }

  // string history = 5;
  if (!this->_internal_history().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_history());
  }

  // string extension = 7;
  if (!this->_internal_extension().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_extension());
  }

  // bool simple = 1;
  if (this->_internal_simple() != 0) {
    total_size += 1 + 1;
  }

  // int32 bitpix = 2;
  if (this->_internal_bitpix() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_bitpix());
  }

  // int32 n_extensions = 6;
  if (this->_internal_n_extensions() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_n_extensions());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FitsHeader::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FitsHeader::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FitsHeader::GetClassData() const { return &_class_data_; }


void FitsHeader::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FitsHeader*>(&to_msg);
  auto& from = static_cast<const FitsHeader&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:fits_proto.FitsHeader)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.size_.MergeFrom(from._impl_.size_);
  _this->_impl_.keywords_.MergeFrom(from._impl_.keywords_);
  if (!from._internal_comment().empty()) {
    _this->_internal_set_comment(from._internal_comment());
  }
  if (!from._internal_history().empty()) {
    _this->_internal_set_history(from._internal_history());
  }
  if (!from._internal_extension().empty()) {
    _this->_internal_set_extension(from._internal_extension());
  }
  if (from._internal_simple() != 0) {
    _this->_internal_set_simple(from._internal_simple());
  }
  if (from._internal_bitpix() != 0) {
    _this->_internal_set_bitpix(from._internal_bitpix());
  }
  if (from._internal_n_extensions() != 0) {
    _this->_internal_set_n_extensions(from._internal_n_extensions());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FitsHeader::CopyFrom(const FitsHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fits_proto.FitsHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FitsHeader::IsInitialized() const {
  return true;
}

void FitsHeader::InternalSwap(FitsHeader* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.size_.InternalSwap(&other->_impl_.size_);
  _impl_.keywords_.InternalSwap(&other->_impl_.keywords_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.comment_, lhs_arena,
      &other->_impl_.comment_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.history_, lhs_arena,
      &other->_impl_.history_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.extension_, lhs_arena,
      &other->_impl_.extension_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FitsHeader, _impl_.n_extensions_)
      + sizeof(FitsHeader::_impl_.n_extensions_)
      - PROTOBUF_FIELD_OFFSET(FitsHeader, _impl_.simple_)>(
          reinterpret_cast<char*>(&_impl_.simple_),
          reinterpret_cast<char*>(&other->_impl_.simple_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FitsHeader::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fits_2eproto_getter, &descriptor_table_fits_2eproto_once,
      file_level_metadata_fits_2eproto[2]);
}

// ===================================================================

class FitsHdu_FloatData::_Internal {
 public:
};

FitsHdu_FloatData::FitsHdu_FloatData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:fits_proto.FitsHdu.FloatData)
}
FitsHdu_FloatData::FitsHdu_FloatData(const FitsHdu_FloatData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FitsHdu_FloatData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){from._impl_.data_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:fits_proto.FitsHdu.FloatData)
}

inline void FitsHdu_FloatData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

FitsHdu_FloatData::~FitsHdu_FloatData() {
  // @@protoc_insertion_point(destructor:fits_proto.FitsHdu.FloatData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FitsHdu_FloatData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_.~RepeatedField();
}

void FitsHdu_FloatData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FitsHdu_FloatData::Clear() {
// @@protoc_insertion_point(message_clear_start:fits_proto.FitsHdu.FloatData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FitsHdu_FloatData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated float data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_data(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 13) {
          _internal_add_data(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FitsHdu_FloatData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fits_proto.FitsHdu.FloatData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float data = 1;
  if (this->_internal_data_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fits_proto.FitsHdu.FloatData)
  return target;
}

size_t FitsHdu_FloatData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fits_proto.FitsHdu.FloatData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float data = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_data_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FitsHdu_FloatData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FitsHdu_FloatData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FitsHdu_FloatData::GetClassData() const { return &_class_data_; }


void FitsHdu_FloatData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FitsHdu_FloatData*>(&to_msg);
  auto& from = static_cast<const FitsHdu_FloatData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:fits_proto.FitsHdu.FloatData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.data_.MergeFrom(from._impl_.data_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FitsHdu_FloatData::CopyFrom(const FitsHdu_FloatData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fits_proto.FitsHdu.FloatData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FitsHdu_FloatData::IsInitialized() const {
  return true;
}

void FitsHdu_FloatData::InternalSwap(FitsHdu_FloatData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.data_.InternalSwap(&other->_impl_.data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FitsHdu_FloatData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fits_2eproto_getter, &descriptor_table_fits_2eproto_once,
      file_level_metadata_fits_2eproto[3]);
}

// ===================================================================

class FitsHdu_DoubleData::_Internal {
 public:
};

FitsHdu_DoubleData::FitsHdu_DoubleData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:fits_proto.FitsHdu.DoubleData)
}
FitsHdu_DoubleData::FitsHdu_DoubleData(const FitsHdu_DoubleData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FitsHdu_DoubleData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){from._impl_.data_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:fits_proto.FitsHdu.DoubleData)
}

inline void FitsHdu_DoubleData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

FitsHdu_DoubleData::~FitsHdu_DoubleData() {
  // @@protoc_insertion_point(destructor:fits_proto.FitsHdu.DoubleData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FitsHdu_DoubleData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_.~RepeatedField();
}

void FitsHdu_DoubleData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FitsHdu_DoubleData::Clear() {
// @@protoc_insertion_point(message_clear_start:fits_proto.FitsHdu.DoubleData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FitsHdu_DoubleData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated double data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_data(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 9) {
          _internal_add_data(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FitsHdu_DoubleData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fits_proto.FitsHdu.DoubleData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double data = 1;
  if (this->_internal_data_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fits_proto.FitsHdu.DoubleData)
  return target;
}

size_t FitsHdu_DoubleData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fits_proto.FitsHdu.DoubleData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double data = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_data_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FitsHdu_DoubleData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FitsHdu_DoubleData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FitsHdu_DoubleData::GetClassData() const { return &_class_data_; }


void FitsHdu_DoubleData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FitsHdu_DoubleData*>(&to_msg);
  auto& from = static_cast<const FitsHdu_DoubleData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:fits_proto.FitsHdu.DoubleData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.data_.MergeFrom(from._impl_.data_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FitsHdu_DoubleData::CopyFrom(const FitsHdu_DoubleData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fits_proto.FitsHdu.DoubleData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FitsHdu_DoubleData::IsInitialized() const {
  return true;
}

void FitsHdu_DoubleData::InternalSwap(FitsHdu_DoubleData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.data_.InternalSwap(&other->_impl_.data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FitsHdu_DoubleData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fits_2eproto_getter, &descriptor_table_fits_2eproto_once,
      file_level_metadata_fits_2eproto[4]);
}

// ===================================================================

class FitsHdu_Int32Data::_Internal {
 public:
};

FitsHdu_Int32Data::FitsHdu_Int32Data(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:fits_proto.FitsHdu.Int32Data)
}
FitsHdu_Int32Data::FitsHdu_Int32Data(const FitsHdu_Int32Data& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FitsHdu_Int32Data* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){from._impl_.data_}
    , /*decltype(_impl_._data_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:fits_proto.FitsHdu.Int32Data)
}

inline void FitsHdu_Int32Data::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){arena}
    , /*decltype(_impl_._data_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

FitsHdu_Int32Data::~FitsHdu_Int32Data() {
  // @@protoc_insertion_point(destructor:fits_proto.FitsHdu.Int32Data)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FitsHdu_Int32Data::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_.~RepeatedField();
}

void FitsHdu_Int32Data::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FitsHdu_Int32Data::Clear() {
// @@protoc_insertion_point(message_clear_start:fits_proto.FitsHdu.Int32Data)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FitsHdu_Int32Data::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated int32 data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_data(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_data(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FitsHdu_Int32Data::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fits_proto.FitsHdu.Int32Data)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 data = 1;
  {
    int byte_size = _impl_._data_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_data(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fits_proto.FitsHdu.Int32Data)
  return target;
}

size_t FitsHdu_Int32Data::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fits_proto.FitsHdu.Int32Data)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 data = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.data_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._data_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FitsHdu_Int32Data::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FitsHdu_Int32Data::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FitsHdu_Int32Data::GetClassData() const { return &_class_data_; }


void FitsHdu_Int32Data::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FitsHdu_Int32Data*>(&to_msg);
  auto& from = static_cast<const FitsHdu_Int32Data&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:fits_proto.FitsHdu.Int32Data)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.data_.MergeFrom(from._impl_.data_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FitsHdu_Int32Data::CopyFrom(const FitsHdu_Int32Data& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fits_proto.FitsHdu.Int32Data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FitsHdu_Int32Data::IsInitialized() const {
  return true;
}

void FitsHdu_Int32Data::InternalSwap(FitsHdu_Int32Data* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.data_.InternalSwap(&other->_impl_.data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FitsHdu_Int32Data::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fits_2eproto_getter, &descriptor_table_fits_2eproto_once,
      file_level_metadata_fits_2eproto[5]);
}

// ===================================================================

class FitsHdu_Int64Data::_Internal {
 public:
};

FitsHdu_Int64Data::FitsHdu_Int64Data(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:fits_proto.FitsHdu.Int64Data)
}
FitsHdu_Int64Data::FitsHdu_Int64Data(const FitsHdu_Int64Data& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FitsHdu_Int64Data* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){from._impl_.data_}
    , /*decltype(_impl_._data_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:fits_proto.FitsHdu.Int64Data)
}

inline void FitsHdu_Int64Data::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){arena}
    , /*decltype(_impl_._data_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

FitsHdu_Int64Data::~FitsHdu_Int64Data() {
  // @@protoc_insertion_point(destructor:fits_proto.FitsHdu.Int64Data)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FitsHdu_Int64Data::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_.~RepeatedField();
}

void FitsHdu_Int64Data::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FitsHdu_Int64Data::Clear() {
// @@protoc_insertion_point(message_clear_start:fits_proto.FitsHdu.Int64Data)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FitsHdu_Int64Data::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated int64 data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_data(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_data(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FitsHdu_Int64Data::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fits_proto.FitsHdu.Int64Data)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int64 data = 1;
  {
    int byte_size = _impl_._data_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          1, _internal_data(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fits_proto.FitsHdu.Int64Data)
  return target;
}

size_t FitsHdu_Int64Data::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fits_proto.FitsHdu.Int64Data)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 data = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.data_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._data_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FitsHdu_Int64Data::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FitsHdu_Int64Data::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FitsHdu_Int64Data::GetClassData() const { return &_class_data_; }


void FitsHdu_Int64Data::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FitsHdu_Int64Data*>(&to_msg);
  auto& from = static_cast<const FitsHdu_Int64Data&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:fits_proto.FitsHdu.Int64Data)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.data_.MergeFrom(from._impl_.data_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FitsHdu_Int64Data::CopyFrom(const FitsHdu_Int64Data& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fits_proto.FitsHdu.Int64Data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FitsHdu_Int64Data::IsInitialized() const {
  return true;
}

void FitsHdu_Int64Data::InternalSwap(FitsHdu_Int64Data* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.data_.InternalSwap(&other->_impl_.data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FitsHdu_Int64Data::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fits_2eproto_getter, &descriptor_table_fits_2eproto_once,
      file_level_metadata_fits_2eproto[6]);
}

// ===================================================================

class FitsHdu_SInt32Data::_Internal {
 public:
};

FitsHdu_SInt32Data::FitsHdu_SInt32Data(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:fits_proto.FitsHdu.SInt32Data)
}
FitsHdu_SInt32Data::FitsHdu_SInt32Data(const FitsHdu_SInt32Data& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FitsHdu_SInt32Data* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){from._impl_.data_}
    , /*decltype(_impl_._data_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:fits_proto.FitsHdu.SInt32Data)
}

inline void FitsHdu_SInt32Data::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){arena}
    , /*decltype(_impl_._data_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

FitsHdu_SInt32Data::~FitsHdu_SInt32Data() {
  // @@protoc_insertion_point(destructor:fits_proto.FitsHdu.SInt32Data)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FitsHdu_SInt32Data::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_.~RepeatedField();
}

void FitsHdu_SInt32Data::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FitsHdu_SInt32Data::Clear() {
// @@protoc_insertion_point(message_clear_start:fits_proto.FitsHdu.SInt32Data)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FitsHdu_SInt32Data::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated sint32 data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedSInt32Parser(_internal_mutable_data(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_data(::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FitsHdu_SInt32Data::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fits_proto.FitsHdu.SInt32Data)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated sint32 data = 1;
  {
    int byte_size = _impl_._data_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteSInt32Packed(
          1, _internal_data(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fits_proto.FitsHdu.SInt32Data)
  return target;
}

size_t FitsHdu_SInt32Data::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fits_proto.FitsHdu.SInt32Data)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated sint32 data = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      SInt32Size(this->_impl_.data_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._data_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FitsHdu_SInt32Data::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FitsHdu_SInt32Data::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FitsHdu_SInt32Data::GetClassData() const { return &_class_data_; }


void FitsHdu_SInt32Data::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FitsHdu_SInt32Data*>(&to_msg);
  auto& from = static_cast<const FitsHdu_SInt32Data&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:fits_proto.FitsHdu.SInt32Data)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.data_.MergeFrom(from._impl_.data_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FitsHdu_SInt32Data::CopyFrom(const FitsHdu_SInt32Data& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fits_proto.FitsHdu.SInt32Data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FitsHdu_SInt32Data::IsInitialized() const {
  return true;
}

void FitsHdu_SInt32Data::InternalSwap(FitsHdu_SInt32Data* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.data_.InternalSwap(&other->_impl_.data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FitsHdu_SInt32Data::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fits_2eproto_getter, &descriptor_table_fits_2eproto_once,
      file_level_metadata_fits_2eproto[7]);
}

// ===================================================================

class FitsHdu_SInt64Data::_Internal {
 public:
};

FitsHdu_SInt64Data::FitsHdu_SInt64Data(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:fits_proto.FitsHdu.SInt64Data)
}
FitsHdu_SInt64Data::FitsHdu_SInt64Data(const FitsHdu_SInt64Data& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FitsHdu_SInt64Data* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){from._impl_.data_}
    , /*decltype(_impl_._data_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:fits_proto.FitsHdu.SInt64Data)
}

inline void FitsHdu_SInt64Data::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){arena}
    , /*decltype(_impl_._data_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

FitsHdu_SInt64Data::~FitsHdu_SInt64Data() {
  // @@protoc_insertion_point(destructor:fits_proto.FitsHdu.SInt64Data)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FitsHdu_SInt64Data::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_.~RepeatedField();
}

void FitsHdu_SInt64Data::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FitsHdu_SInt64Data::Clear() {
// @@protoc_insertion_point(message_clear_start:fits_proto.FitsHdu.SInt64Data)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FitsHdu_SInt64Data::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated sint64 data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedSInt64Parser(_internal_mutable_data(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_data(::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FitsHdu_SInt64Data::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fits_proto.FitsHdu.SInt64Data)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated sint64 data = 1;
  {
    int byte_size = _impl_._data_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteSInt64Packed(
          1, _internal_data(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fits_proto.FitsHdu.SInt64Data)
  return target;
}

size_t FitsHdu_SInt64Data::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fits_proto.FitsHdu.SInt64Data)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated sint64 data = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      SInt64Size(this->_impl_.data_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._data_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FitsHdu_SInt64Data::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FitsHdu_SInt64Data::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FitsHdu_SInt64Data::GetClassData() const { return &_class_data_; }


void FitsHdu_SInt64Data::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FitsHdu_SInt64Data*>(&to_msg);
  auto& from = static_cast<const FitsHdu_SInt64Data&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:fits_proto.FitsHdu.SInt64Data)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.data_.MergeFrom(from._impl_.data_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FitsHdu_SInt64Data::CopyFrom(const FitsHdu_SInt64Data& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fits_proto.FitsHdu.SInt64Data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FitsHdu_SInt64Data::IsInitialized() const {
  return true;
}

void FitsHdu_SInt64Data::InternalSwap(FitsHdu_SInt64Data* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.data_.InternalSwap(&other->_impl_.data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FitsHdu_SInt64Data::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fits_2eproto_getter, &descriptor_table_fits_2eproto_once,
      file_level_metadata_fits_2eproto[8]);
}

// ===================================================================

class FitsHdu::_Internal {
 public:
  static const ::fits_proto::FitsHdu_FloatData& float_data(const FitsHdu* msg);
  static const ::fits_proto::FitsHdu_DoubleData& double_data(const FitsHdu* msg);
  static const ::fits_proto::FitsHdu_Int32Data& int32_data(const FitsHdu* msg);
  static const ::fits_proto::FitsHdu_Int64Data& int64_data(const FitsHdu* msg);
  static const ::fits_proto::FitsHdu_SInt32Data& sint32_data(const FitsHdu* msg);
  static const ::fits_proto::FitsHdu_SInt64Data& sint64_data(const FitsHdu* msg);
};

const ::fits_proto::FitsHdu_FloatData&
FitsHdu::_Internal::float_data(const FitsHdu* msg) {
  return *msg->_impl_.payload_.float_data_;
}
const ::fits_proto::FitsHdu_DoubleData&
FitsHdu::_Internal::double_data(const FitsHdu* msg) {
  return *msg->_impl_.payload_.double_data_;
}
const ::fits_proto::FitsHdu_Int32Data&
FitsHdu::_Internal::int32_data(const FitsHdu* msg) {
  return *msg->_impl_.payload_.int32_data_;
}
const ::fits_proto::FitsHdu_Int64Data&
FitsHdu::_Internal::int64_data(const FitsHdu* msg) {
  return *msg->_impl_.payload_.int64_data_;
}
const ::fits_proto::FitsHdu_SInt32Data&
FitsHdu::_Internal::sint32_data(const FitsHdu* msg) {
  return *msg->_impl_.payload_.sint32_data_;
}
const ::fits_proto::FitsHdu_SInt64Data&
FitsHdu::_Internal::sint64_data(const FitsHdu* msg) {
  return *msg->_impl_.payload_.sint64_data_;
}
void FitsHdu::set_allocated_float_data(::fits_proto::FitsHdu_FloatData* float_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (float_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(float_data);
    if (message_arena != submessage_arena) {
      float_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, float_data, submessage_arena);
    }
    set_has_float_data();
    _impl_.payload_.float_data_ = float_data;
  }
  // @@protoc_insertion_point(field_set_allocated:fits_proto.FitsHdu.float_data)
}
void FitsHdu::set_allocated_double_data(::fits_proto::FitsHdu_DoubleData* double_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (double_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(double_data);
    if (message_arena != submessage_arena) {
      double_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, double_data, submessage_arena);
    }
    set_has_double_data();
    _impl_.payload_.double_data_ = double_data;
  }
  // @@protoc_insertion_point(field_set_allocated:fits_proto.FitsHdu.double_data)
}
void FitsHdu::set_allocated_int32_data(::fits_proto::FitsHdu_Int32Data* int32_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (int32_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(int32_data);
    if (message_arena != submessage_arena) {
      int32_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, int32_data, submessage_arena);
    }
    set_has_int32_data();
    _impl_.payload_.int32_data_ = int32_data;
  }
  // @@protoc_insertion_point(field_set_allocated:fits_proto.FitsHdu.int32_data)
}
void FitsHdu::set_allocated_int64_data(::fits_proto::FitsHdu_Int64Data* int64_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (int64_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(int64_data);
    if (message_arena != submessage_arena) {
      int64_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, int64_data, submessage_arena);
    }
    set_has_int64_data();
    _impl_.payload_.int64_data_ = int64_data;
  }
  // @@protoc_insertion_point(field_set_allocated:fits_proto.FitsHdu.int64_data)
}
void FitsHdu::set_allocated_sint32_data(::fits_proto::FitsHdu_SInt32Data* sint32_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (sint32_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(sint32_data);
    if (message_arena != submessage_arena) {
      sint32_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sint32_data, submessage_arena);
    }
    set_has_sint32_data();
    _impl_.payload_.sint32_data_ = sint32_data;
  }
  // @@protoc_insertion_point(field_set_allocated:fits_proto.FitsHdu.sint32_data)
}
void FitsHdu::set_allocated_sint64_data(::fits_proto::FitsHdu_SInt64Data* sint64_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (sint64_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(sint64_data);
    if (message_arena != submessage_arena) {
      sint64_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sint64_data, submessage_arena);
    }
    set_has_sint64_data();
    _impl_.payload_.sint64_data_ = sint64_data;
  }
  // @@protoc_insertion_point(field_set_allocated:fits_proto.FitsHdu.sint64_data)
}
FitsHdu::FitsHdu(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:fits_proto.FitsHdu)
}
FitsHdu::FitsHdu(const FitsHdu& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FitsHdu* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.header_){from._impl_.header_}
    , decltype(_impl_.payload_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_payload();
  switch (from.payload_case()) {
    case kFloatData: {
      _this->_internal_mutable_float_data()->::fits_proto::FitsHdu_FloatData::MergeFrom(
          from._internal_float_data());
      break;
    }
    case kDoubleData: {
      _this->_internal_mutable_double_data()->::fits_proto::FitsHdu_DoubleData::MergeFrom(
          from._internal_double_data());
      break;
    }
    case kInt32Data: {
      _this->_internal_mutable_int32_data()->::fits_proto::FitsHdu_Int32Data::MergeFrom(
          from._internal_int32_data());
      break;
    }
    case kInt64Data: {
      _this->_internal_mutable_int64_data()->::fits_proto::FitsHdu_Int64Data::MergeFrom(
          from._internal_int64_data());
      break;
    }
    case kSint32Data: {
      _this->_internal_mutable_sint32_data()->::fits_proto::FitsHdu_SInt32Data::MergeFrom(
          from._internal_sint32_data());
      break;
    }
    case kSint64Data: {
      _this->_internal_mutable_sint64_data()->::fits_proto::FitsHdu_SInt64Data::MergeFrom(
          from._internal_sint64_data());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:fits_proto.FitsHdu)
}

inline void FitsHdu::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.header_){arena}
    , decltype(_impl_.payload_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_payload();
}

FitsHdu::~FitsHdu() {
  // @@protoc_insertion_point(destructor:fits_proto.FitsHdu)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FitsHdu::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.header_.~RepeatedPtrField();
  if (has_payload()) {
    clear_payload();
  }
}

void FitsHdu::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FitsHdu::clear_payload() {
// @@protoc_insertion_point(one_of_clear_start:fits_proto.FitsHdu)
  switch (payload_case()) {
    case kFloatData: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.payload_.float_data_;
      }
      break;
    }
    case kDoubleData: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.payload_.double_data_;
      }
      break;
    }
    case kInt32Data: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.payload_.int32_data_;
      }
      break;
    }
    case kInt64Data: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.payload_.int64_data_;
      }
      break;
    }
    case kSint32Data: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.payload_.sint32_data_;
      }
      break;
    }
    case kSint64Data: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.payload_.sint64_data_;
      }
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = PAYLOAD_NOT_SET;
}


void FitsHdu::Clear() {
// @@protoc_insertion_point(message_clear_start:fits_proto.FitsHdu)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.header_.Clear();
  clear_payload();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FitsHdu::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .fits_proto.FitsHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_header(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .fits_proto.FitsHdu.FloatData float_data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_float_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .fits_proto.FitsHdu.DoubleData double_data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_double_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .fits_proto.FitsHdu.Int32Data int32_data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_int32_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .fits_proto.FitsHdu.Int64Data int64_data = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_int64_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .fits_proto.FitsHdu.SInt32Data sint32_data = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_sint32_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .fits_proto.FitsHdu.SInt64Data sint64_data = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_sint64_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FitsHdu::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fits_proto.FitsHdu)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .fits_proto.FitsHeader header = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_header_size()); i < n; i++) {
    const auto& repfield = this->_internal_header(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .fits_proto.FitsHdu.FloatData float_data = 2;
  if (_internal_has_float_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::float_data(this),
        _Internal::float_data(this).GetCachedSize(), target, stream);
  }

  // .fits_proto.FitsHdu.DoubleData double_data = 3;
  if (_internal_has_double_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::double_data(this),
        _Internal::double_data(this).GetCachedSize(), target, stream);
  }

  // .fits_proto.FitsHdu.Int32Data int32_data = 4;
  if (_internal_has_int32_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::int32_data(this),
        _Internal::int32_data(this).GetCachedSize(), target, stream);
  }

  // .fits_proto.FitsHdu.Int64Data int64_data = 5;
  if (_internal_has_int64_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::int64_data(this),
        _Internal::int64_data(this).GetCachedSize(), target, stream);
  }

  // .fits_proto.FitsHdu.SInt32Data sint32_data = 6;
  if (_internal_has_sint32_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::sint32_data(this),
        _Internal::sint32_data(this).GetCachedSize(), target, stream);
  }

  // .fits_proto.FitsHdu.SInt64Data sint64_data = 7;
  if (_internal_has_sint64_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::sint64_data(this),
        _Internal::sint64_data(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fits_proto.FitsHdu)
  return target;
}

size_t FitsHdu::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fits_proto.FitsHdu)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .fits_proto.FitsHeader header = 1;
  total_size += 1UL * this->_internal_header_size();
  for (const auto& msg : this->_impl_.header_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  switch (payload_case()) {
    // .fits_proto.FitsHdu.FloatData float_data = 2;
    case kFloatData: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.payload_.float_data_);
      break;
    }
    // .fits_proto.FitsHdu.DoubleData double_data = 3;
    case kDoubleData: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.payload_.double_data_);
      break;
    }
    // .fits_proto.FitsHdu.Int32Data int32_data = 4;
    case kInt32Data: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.payload_.int32_data_);
      break;
    }
    // .fits_proto.FitsHdu.Int64Data int64_data = 5;
    case kInt64Data: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.payload_.int64_data_);
      break;
    }
    // .fits_proto.FitsHdu.SInt32Data sint32_data = 6;
    case kSint32Data: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.payload_.sint32_data_);
      break;
    }
    // .fits_proto.FitsHdu.SInt64Data sint64_data = 7;
    case kSint64Data: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.payload_.sint64_data_);
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FitsHdu::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FitsHdu::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FitsHdu::GetClassData() const { return &_class_data_; }


void FitsHdu::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FitsHdu*>(&to_msg);
  auto& from = static_cast<const FitsHdu&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:fits_proto.FitsHdu)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.header_.MergeFrom(from._impl_.header_);
  switch (from.payload_case()) {
    case kFloatData: {
      _this->_internal_mutable_float_data()->::fits_proto::FitsHdu_FloatData::MergeFrom(
          from._internal_float_data());
      break;
    }
    case kDoubleData: {
      _this->_internal_mutable_double_data()->::fits_proto::FitsHdu_DoubleData::MergeFrom(
          from._internal_double_data());
      break;
    }
    case kInt32Data: {
      _this->_internal_mutable_int32_data()->::fits_proto::FitsHdu_Int32Data::MergeFrom(
          from._internal_int32_data());
      break;
    }
    case kInt64Data: {
      _this->_internal_mutable_int64_data()->::fits_proto::FitsHdu_Int64Data::MergeFrom(
          from._internal_int64_data());
      break;
    }
    case kSint32Data: {
      _this->_internal_mutable_sint32_data()->::fits_proto::FitsHdu_SInt32Data::MergeFrom(
          from._internal_sint32_data());
      break;
    }
    case kSint64Data: {
      _this->_internal_mutable_sint64_data()->::fits_proto::FitsHdu_SInt64Data::MergeFrom(
          from._internal_sint64_data());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FitsHdu::CopyFrom(const FitsHdu& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fits_proto.FitsHdu)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FitsHdu::IsInitialized() const {
  return true;
}

void FitsHdu::InternalSwap(FitsHdu* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.header_.InternalSwap(&other->_impl_.header_);
  swap(_impl_.payload_, other->_impl_.payload_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata FitsHdu::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fits_2eproto_getter, &descriptor_table_fits_2eproto_once,
      file_level_metadata_fits_2eproto[9]);
}

// ===================================================================

class Fits::_Internal {
 public:
};

Fits::Fits(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:fits_proto.Fits)
}
Fits::Fits(const Fits& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Fits* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.hdu_){from._impl_.hdu_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:fits_proto.Fits)
}

inline void Fits::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.hdu_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Fits::~Fits() {
  // @@protoc_insertion_point(destructor:fits_proto.Fits)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Fits::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.hdu_.~RepeatedPtrField();
}

void Fits::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Fits::Clear() {
// @@protoc_insertion_point(message_clear_start:fits_proto.Fits)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.hdu_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Fits::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .fits_proto.FitsHdu hdu = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_hdu(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Fits::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fits_proto.Fits)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .fits_proto.FitsHdu hdu = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_hdu_size()); i < n; i++) {
    const auto& repfield = this->_internal_hdu(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fits_proto.Fits)
  return target;
}

size_t Fits::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fits_proto.Fits)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .fits_proto.FitsHdu hdu = 1;
  total_size += 1UL * this->_internal_hdu_size();
  for (const auto& msg : this->_impl_.hdu_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Fits::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Fits::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Fits::GetClassData() const { return &_class_data_; }


void Fits::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Fits*>(&to_msg);
  auto& from = static_cast<const Fits&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:fits_proto.Fits)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.hdu_.MergeFrom(from._impl_.hdu_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Fits::CopyFrom(const Fits& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fits_proto.Fits)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Fits::IsInitialized() const {
  return true;
}

void Fits::InternalSwap(Fits* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.hdu_.InternalSwap(&other->_impl_.hdu_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Fits::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fits_2eproto_getter, &descriptor_table_fits_2eproto_once,
      file_level_metadata_fits_2eproto[10]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace fits_proto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::fits_proto::KeywordData*
Arena::CreateMaybeMessage< ::fits_proto::KeywordData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fits_proto::KeywordData >(arena);
}
template<> PROTOBUF_NOINLINE ::fits_proto::FitsHeader_KeywordsEntry_DoNotUse*
Arena::CreateMaybeMessage< ::fits_proto::FitsHeader_KeywordsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fits_proto::FitsHeader_KeywordsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::fits_proto::FitsHeader*
Arena::CreateMaybeMessage< ::fits_proto::FitsHeader >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fits_proto::FitsHeader >(arena);
}
template<> PROTOBUF_NOINLINE ::fits_proto::FitsHdu_FloatData*
Arena::CreateMaybeMessage< ::fits_proto::FitsHdu_FloatData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fits_proto::FitsHdu_FloatData >(arena);
}
template<> PROTOBUF_NOINLINE ::fits_proto::FitsHdu_DoubleData*
Arena::CreateMaybeMessage< ::fits_proto::FitsHdu_DoubleData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fits_proto::FitsHdu_DoubleData >(arena);
}
template<> PROTOBUF_NOINLINE ::fits_proto::FitsHdu_Int32Data*
Arena::CreateMaybeMessage< ::fits_proto::FitsHdu_Int32Data >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fits_proto::FitsHdu_Int32Data >(arena);
}
template<> PROTOBUF_NOINLINE ::fits_proto::FitsHdu_Int64Data*
Arena::CreateMaybeMessage< ::fits_proto::FitsHdu_Int64Data >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fits_proto::FitsHdu_Int64Data >(arena);
}
template<> PROTOBUF_NOINLINE ::fits_proto::FitsHdu_SInt32Data*
Arena::CreateMaybeMessage< ::fits_proto::FitsHdu_SInt32Data >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fits_proto::FitsHdu_SInt32Data >(arena);
}
template<> PROTOBUF_NOINLINE ::fits_proto::FitsHdu_SInt64Data*
Arena::CreateMaybeMessage< ::fits_proto::FitsHdu_SInt64Data >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fits_proto::FitsHdu_SInt64Data >(arena);
}
template<> PROTOBUF_NOINLINE ::fits_proto::FitsHdu*
Arena::CreateMaybeMessage< ::fits_proto::FitsHdu >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fits_proto::FitsHdu >(arena);
}
template<> PROTOBUF_NOINLINE ::fits_proto::Fits*
Arena::CreateMaybeMessage< ::fits_proto::Fits >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fits_proto::Fits >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
