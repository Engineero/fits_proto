// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fits.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_fits_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_fits_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021009 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_fits_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_fits_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_fits_2eproto;
namespace fits_proto {
class Fits;
struct FitsDefaultTypeInternal;
extern FitsDefaultTypeInternal _Fits_default_instance_;
class FitsHdu;
struct FitsHduDefaultTypeInternal;
extern FitsHduDefaultTypeInternal _FitsHdu_default_instance_;
class FitsHdu_DoubleData;
struct FitsHdu_DoubleDataDefaultTypeInternal;
extern FitsHdu_DoubleDataDefaultTypeInternal _FitsHdu_DoubleData_default_instance_;
class FitsHdu_FloatData;
struct FitsHdu_FloatDataDefaultTypeInternal;
extern FitsHdu_FloatDataDefaultTypeInternal _FitsHdu_FloatData_default_instance_;
class FitsHdu_Int32Data;
struct FitsHdu_Int32DataDefaultTypeInternal;
extern FitsHdu_Int32DataDefaultTypeInternal _FitsHdu_Int32Data_default_instance_;
class FitsHdu_Int64Data;
struct FitsHdu_Int64DataDefaultTypeInternal;
extern FitsHdu_Int64DataDefaultTypeInternal _FitsHdu_Int64Data_default_instance_;
class FitsHdu_SInt32Data;
struct FitsHdu_SInt32DataDefaultTypeInternal;
extern FitsHdu_SInt32DataDefaultTypeInternal _FitsHdu_SInt32Data_default_instance_;
class FitsHdu_SInt64Data;
struct FitsHdu_SInt64DataDefaultTypeInternal;
extern FitsHdu_SInt64DataDefaultTypeInternal _FitsHdu_SInt64Data_default_instance_;
class FitsHeader;
struct FitsHeaderDefaultTypeInternal;
extern FitsHeaderDefaultTypeInternal _FitsHeader_default_instance_;
class FitsHeader_KeywordsEntry_DoNotUse;
struct FitsHeader_KeywordsEntry_DoNotUseDefaultTypeInternal;
extern FitsHeader_KeywordsEntry_DoNotUseDefaultTypeInternal _FitsHeader_KeywordsEntry_DoNotUse_default_instance_;
class KeywordData;
struct KeywordDataDefaultTypeInternal;
extern KeywordDataDefaultTypeInternal _KeywordData_default_instance_;
}  // namespace fits_proto
PROTOBUF_NAMESPACE_OPEN
template<> ::fits_proto::Fits* Arena::CreateMaybeMessage<::fits_proto::Fits>(Arena*);
template<> ::fits_proto::FitsHdu* Arena::CreateMaybeMessage<::fits_proto::FitsHdu>(Arena*);
template<> ::fits_proto::FitsHdu_DoubleData* Arena::CreateMaybeMessage<::fits_proto::FitsHdu_DoubleData>(Arena*);
template<> ::fits_proto::FitsHdu_FloatData* Arena::CreateMaybeMessage<::fits_proto::FitsHdu_FloatData>(Arena*);
template<> ::fits_proto::FitsHdu_Int32Data* Arena::CreateMaybeMessage<::fits_proto::FitsHdu_Int32Data>(Arena*);
template<> ::fits_proto::FitsHdu_Int64Data* Arena::CreateMaybeMessage<::fits_proto::FitsHdu_Int64Data>(Arena*);
template<> ::fits_proto::FitsHdu_SInt32Data* Arena::CreateMaybeMessage<::fits_proto::FitsHdu_SInt32Data>(Arena*);
template<> ::fits_proto::FitsHdu_SInt64Data* Arena::CreateMaybeMessage<::fits_proto::FitsHdu_SInt64Data>(Arena*);
template<> ::fits_proto::FitsHeader* Arena::CreateMaybeMessage<::fits_proto::FitsHeader>(Arena*);
template<> ::fits_proto::FitsHeader_KeywordsEntry_DoNotUse* Arena::CreateMaybeMessage<::fits_proto::FitsHeader_KeywordsEntry_DoNotUse>(Arena*);
template<> ::fits_proto::KeywordData* Arena::CreateMaybeMessage<::fits_proto::KeywordData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace fits_proto {

// ===================================================================

class KeywordData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fits_proto.KeywordData) */ {
 public:
  inline KeywordData() : KeywordData(nullptr) {}
  ~KeywordData() override;
  explicit PROTOBUF_CONSTEXPR KeywordData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  KeywordData(const KeywordData& from);
  KeywordData(KeywordData&& from) noexcept
    : KeywordData() {
    *this = ::std::move(from);
  }

  inline KeywordData& operator=(const KeywordData& from) {
    CopyFrom(from);
    return *this;
  }
  inline KeywordData& operator=(KeywordData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const KeywordData& default_instance() {
    return *internal_default_instance();
  }
  enum ValueCase {
    kStringVal = 1,
    kInt32Val = 2,
    kSint32Val = 3,
    kInt64Val = 4,
    kSint64Val = 5,
    kFloatVal = 6,
    kDoubleVal = 7,
    kBoolVal = 8,
    VALUE_NOT_SET = 0,
  };

  static inline const KeywordData* internal_default_instance() {
    return reinterpret_cast<const KeywordData*>(
               &_KeywordData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(KeywordData& a, KeywordData& b) {
    a.Swap(&b);
  }
  inline void Swap(KeywordData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KeywordData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  KeywordData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<KeywordData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const KeywordData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const KeywordData& from) {
    KeywordData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KeywordData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fits_proto.KeywordData";
  }
  protected:
  explicit KeywordData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommentFieldNumber = 9,
    kStringValFieldNumber = 1,
    kInt32ValFieldNumber = 2,
    kSint32ValFieldNumber = 3,
    kInt64ValFieldNumber = 4,
    kSint64ValFieldNumber = 5,
    kFloatValFieldNumber = 6,
    kDoubleValFieldNumber = 7,
    kBoolValFieldNumber = 8,
  };
  // string comment = 9;
  void clear_comment();
  const std::string& comment() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_comment(ArgT0&& arg0, ArgT... args);
  std::string* mutable_comment();
  PROTOBUF_NODISCARD std::string* release_comment();
  void set_allocated_comment(std::string* comment);
  private:
  const std::string& _internal_comment() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_comment(const std::string& value);
  std::string* _internal_mutable_comment();
  public:

  // string string_val = 1;
  bool has_string_val() const;
  private:
  bool _internal_has_string_val() const;
  public:
  void clear_string_val();
  const std::string& string_val() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_string_val(ArgT0&& arg0, ArgT... args);
  std::string* mutable_string_val();
  PROTOBUF_NODISCARD std::string* release_string_val();
  void set_allocated_string_val(std::string* string_val);
  private:
  const std::string& _internal_string_val() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_string_val(const std::string& value);
  std::string* _internal_mutable_string_val();
  public:

  // int32 int32_val = 2;
  bool has_int32_val() const;
  private:
  bool _internal_has_int32_val() const;
  public:
  void clear_int32_val();
  int32_t int32_val() const;
  void set_int32_val(int32_t value);
  private:
  int32_t _internal_int32_val() const;
  void _internal_set_int32_val(int32_t value);
  public:

  // sint32 sint32_val = 3;
  bool has_sint32_val() const;
  private:
  bool _internal_has_sint32_val() const;
  public:
  void clear_sint32_val();
  int32_t sint32_val() const;
  void set_sint32_val(int32_t value);
  private:
  int32_t _internal_sint32_val() const;
  void _internal_set_sint32_val(int32_t value);
  public:

  // int64 int64_val = 4;
  bool has_int64_val() const;
  private:
  bool _internal_has_int64_val() const;
  public:
  void clear_int64_val();
  int64_t int64_val() const;
  void set_int64_val(int64_t value);
  private:
  int64_t _internal_int64_val() const;
  void _internal_set_int64_val(int64_t value);
  public:

  // sint64 sint64_val = 5;
  bool has_sint64_val() const;
  private:
  bool _internal_has_sint64_val() const;
  public:
  void clear_sint64_val();
  int64_t sint64_val() const;
  void set_sint64_val(int64_t value);
  private:
  int64_t _internal_sint64_val() const;
  void _internal_set_sint64_val(int64_t value);
  public:

  // float float_val = 6;
  bool has_float_val() const;
  private:
  bool _internal_has_float_val() const;
  public:
  void clear_float_val();
  float float_val() const;
  void set_float_val(float value);
  private:
  float _internal_float_val() const;
  void _internal_set_float_val(float value);
  public:

  // double double_val = 7;
  bool has_double_val() const;
  private:
  bool _internal_has_double_val() const;
  public:
  void clear_double_val();
  double double_val() const;
  void set_double_val(double value);
  private:
  double _internal_double_val() const;
  void _internal_set_double_val(double value);
  public:

  // bool bool_val = 8;
  bool has_bool_val() const;
  private:
  bool _internal_has_bool_val() const;
  public:
  void clear_bool_val();
  bool bool_val() const;
  void set_bool_val(bool value);
  private:
  bool _internal_bool_val() const;
  void _internal_set_bool_val(bool value);
  public:

  void clear_value();
  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:fits_proto.KeywordData)
 private:
  class _Internal;
  void set_has_string_val();
  void set_has_int32_val();
  void set_has_sint32_val();
  void set_has_int64_val();
  void set_has_sint64_val();
  void set_has_float_val();
  void set_has_double_val();
  void set_has_bool_val();

  inline bool has_value() const;
  inline void clear_has_value();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr comment_;
    union ValueUnion {
      constexpr ValueUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr string_val_;
      int32_t int32_val_;
      int32_t sint32_val_;
      int64_t int64_val_;
      int64_t sint64_val_;
      float float_val_;
      double double_val_;
      bool bool_val_;
    } value_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_fits_2eproto;
};
// -------------------------------------------------------------------

class FitsHeader_KeywordsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<FitsHeader_KeywordsEntry_DoNotUse, 
    std::string, ::fits_proto::KeywordData,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<FitsHeader_KeywordsEntry_DoNotUse, 
    std::string, ::fits_proto::KeywordData,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  FitsHeader_KeywordsEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR FitsHeader_KeywordsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit FitsHeader_KeywordsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const FitsHeader_KeywordsEntry_DoNotUse& other);
  static const FitsHeader_KeywordsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const FitsHeader_KeywordsEntry_DoNotUse*>(&_FitsHeader_KeywordsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "fits_proto.FitsHeader.KeywordsEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_fits_2eproto;
};

// -------------------------------------------------------------------

class FitsHeader final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fits_proto.FitsHeader) */ {
 public:
  inline FitsHeader() : FitsHeader(nullptr) {}
  ~FitsHeader() override;
  explicit PROTOBUF_CONSTEXPR FitsHeader(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FitsHeader(const FitsHeader& from);
  FitsHeader(FitsHeader&& from) noexcept
    : FitsHeader() {
    *this = ::std::move(from);
  }

  inline FitsHeader& operator=(const FitsHeader& from) {
    CopyFrom(from);
    return *this;
  }
  inline FitsHeader& operator=(FitsHeader&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FitsHeader& default_instance() {
    return *internal_default_instance();
  }
  static inline const FitsHeader* internal_default_instance() {
    return reinterpret_cast<const FitsHeader*>(
               &_FitsHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(FitsHeader& a, FitsHeader& b) {
    a.Swap(&b);
  }
  inline void Swap(FitsHeader* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FitsHeader* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FitsHeader* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FitsHeader>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FitsHeader& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FitsHeader& from) {
    FitsHeader::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FitsHeader* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fits_proto.FitsHeader";
  }
  protected:
  explicit FitsHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kSizeFieldNumber = 3,
    kKeywordsFieldNumber = 8,
    kCommentFieldNumber = 4,
    kHistoryFieldNumber = 5,
    kExtensionFieldNumber = 7,
    kSimpleFieldNumber = 1,
    kBitpixFieldNumber = 2,
    kNExtensionsFieldNumber = 6,
  };
  // repeated int32 size = 3;
  int size_size() const;
  private:
  int _internal_size_size() const;
  public:
  void clear_size();
  private:
  int32_t _internal_size(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_size() const;
  void _internal_add_size(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_size();
  public:
  int32_t size(int index) const;
  void set_size(int index, int32_t value);
  void add_size(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      size() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_size();

  // map<string, .fits_proto.KeywordData> keywords = 8;
  int keywords_size() const;
  private:
  int _internal_keywords_size() const;
  public:
  void clear_keywords();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::fits_proto::KeywordData >&
      _internal_keywords() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::fits_proto::KeywordData >*
      _internal_mutable_keywords();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::fits_proto::KeywordData >&
      keywords() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::fits_proto::KeywordData >*
      mutable_keywords();

  // string comment = 4;
  void clear_comment();
  const std::string& comment() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_comment(ArgT0&& arg0, ArgT... args);
  std::string* mutable_comment();
  PROTOBUF_NODISCARD std::string* release_comment();
  void set_allocated_comment(std::string* comment);
  private:
  const std::string& _internal_comment() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_comment(const std::string& value);
  std::string* _internal_mutable_comment();
  public:

  // string history = 5;
  void clear_history();
  const std::string& history() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_history(ArgT0&& arg0, ArgT... args);
  std::string* mutable_history();
  PROTOBUF_NODISCARD std::string* release_history();
  void set_allocated_history(std::string* history);
  private:
  const std::string& _internal_history() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_history(const std::string& value);
  std::string* _internal_mutable_history();
  public:

  // string extension = 7;
  void clear_extension();
  const std::string& extension() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_extension(ArgT0&& arg0, ArgT... args);
  std::string* mutable_extension();
  PROTOBUF_NODISCARD std::string* release_extension();
  void set_allocated_extension(std::string* extension);
  private:
  const std::string& _internal_extension() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_extension(const std::string& value);
  std::string* _internal_mutable_extension();
  public:

  // bool simple = 1;
  void clear_simple();
  bool simple() const;
  void set_simple(bool value);
  private:
  bool _internal_simple() const;
  void _internal_set_simple(bool value);
  public:

  // int32 bitpix = 2;
  void clear_bitpix();
  int32_t bitpix() const;
  void set_bitpix(int32_t value);
  private:
  int32_t _internal_bitpix() const;
  void _internal_set_bitpix(int32_t value);
  public:

  // int32 n_extensions = 6;
  void clear_n_extensions();
  int32_t n_extensions() const;
  void set_n_extensions(int32_t value);
  private:
  int32_t _internal_n_extensions() const;
  void _internal_set_n_extensions(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:fits_proto.FitsHeader)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > size_;
    mutable std::atomic<int> _size_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        FitsHeader_KeywordsEntry_DoNotUse,
        std::string, ::fits_proto::KeywordData,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> keywords_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr comment_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr history_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr extension_;
    bool simple_;
    int32_t bitpix_;
    int32_t n_extensions_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_fits_2eproto;
};
// -------------------------------------------------------------------

class FitsHdu_FloatData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fits_proto.FitsHdu.FloatData) */ {
 public:
  inline FitsHdu_FloatData() : FitsHdu_FloatData(nullptr) {}
  ~FitsHdu_FloatData() override;
  explicit PROTOBUF_CONSTEXPR FitsHdu_FloatData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FitsHdu_FloatData(const FitsHdu_FloatData& from);
  FitsHdu_FloatData(FitsHdu_FloatData&& from) noexcept
    : FitsHdu_FloatData() {
    *this = ::std::move(from);
  }

  inline FitsHdu_FloatData& operator=(const FitsHdu_FloatData& from) {
    CopyFrom(from);
    return *this;
  }
  inline FitsHdu_FloatData& operator=(FitsHdu_FloatData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FitsHdu_FloatData& default_instance() {
    return *internal_default_instance();
  }
  static inline const FitsHdu_FloatData* internal_default_instance() {
    return reinterpret_cast<const FitsHdu_FloatData*>(
               &_FitsHdu_FloatData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(FitsHdu_FloatData& a, FitsHdu_FloatData& b) {
    a.Swap(&b);
  }
  inline void Swap(FitsHdu_FloatData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FitsHdu_FloatData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FitsHdu_FloatData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FitsHdu_FloatData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FitsHdu_FloatData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FitsHdu_FloatData& from) {
    FitsHdu_FloatData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FitsHdu_FloatData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fits_proto.FitsHdu.FloatData";
  }
  protected:
  explicit FitsHdu_FloatData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // repeated float data = 1;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  private:
  float _internal_data(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_data() const;
  void _internal_add_data(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_data();
  public:
  float data(int index) const;
  void set_data(int index, float value);
  void add_data(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      data() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_data();

  // @@protoc_insertion_point(class_scope:fits_proto.FitsHdu.FloatData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > data_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_fits_2eproto;
};
// -------------------------------------------------------------------

class FitsHdu_DoubleData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fits_proto.FitsHdu.DoubleData) */ {
 public:
  inline FitsHdu_DoubleData() : FitsHdu_DoubleData(nullptr) {}
  ~FitsHdu_DoubleData() override;
  explicit PROTOBUF_CONSTEXPR FitsHdu_DoubleData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FitsHdu_DoubleData(const FitsHdu_DoubleData& from);
  FitsHdu_DoubleData(FitsHdu_DoubleData&& from) noexcept
    : FitsHdu_DoubleData() {
    *this = ::std::move(from);
  }

  inline FitsHdu_DoubleData& operator=(const FitsHdu_DoubleData& from) {
    CopyFrom(from);
    return *this;
  }
  inline FitsHdu_DoubleData& operator=(FitsHdu_DoubleData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FitsHdu_DoubleData& default_instance() {
    return *internal_default_instance();
  }
  static inline const FitsHdu_DoubleData* internal_default_instance() {
    return reinterpret_cast<const FitsHdu_DoubleData*>(
               &_FitsHdu_DoubleData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(FitsHdu_DoubleData& a, FitsHdu_DoubleData& b) {
    a.Swap(&b);
  }
  inline void Swap(FitsHdu_DoubleData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FitsHdu_DoubleData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FitsHdu_DoubleData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FitsHdu_DoubleData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FitsHdu_DoubleData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FitsHdu_DoubleData& from) {
    FitsHdu_DoubleData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FitsHdu_DoubleData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fits_proto.FitsHdu.DoubleData";
  }
  protected:
  explicit FitsHdu_DoubleData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // repeated double data = 1;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  private:
  double _internal_data(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_data() const;
  void _internal_add_data(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_data();
  public:
  double data(int index) const;
  void set_data(int index, double value);
  void add_data(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      data() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_data();

  // @@protoc_insertion_point(class_scope:fits_proto.FitsHdu.DoubleData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > data_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_fits_2eproto;
};
// -------------------------------------------------------------------

class FitsHdu_Int32Data final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fits_proto.FitsHdu.Int32Data) */ {
 public:
  inline FitsHdu_Int32Data() : FitsHdu_Int32Data(nullptr) {}
  ~FitsHdu_Int32Data() override;
  explicit PROTOBUF_CONSTEXPR FitsHdu_Int32Data(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FitsHdu_Int32Data(const FitsHdu_Int32Data& from);
  FitsHdu_Int32Data(FitsHdu_Int32Data&& from) noexcept
    : FitsHdu_Int32Data() {
    *this = ::std::move(from);
  }

  inline FitsHdu_Int32Data& operator=(const FitsHdu_Int32Data& from) {
    CopyFrom(from);
    return *this;
  }
  inline FitsHdu_Int32Data& operator=(FitsHdu_Int32Data&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FitsHdu_Int32Data& default_instance() {
    return *internal_default_instance();
  }
  static inline const FitsHdu_Int32Data* internal_default_instance() {
    return reinterpret_cast<const FitsHdu_Int32Data*>(
               &_FitsHdu_Int32Data_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(FitsHdu_Int32Data& a, FitsHdu_Int32Data& b) {
    a.Swap(&b);
  }
  inline void Swap(FitsHdu_Int32Data* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FitsHdu_Int32Data* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FitsHdu_Int32Data* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FitsHdu_Int32Data>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FitsHdu_Int32Data& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FitsHdu_Int32Data& from) {
    FitsHdu_Int32Data::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FitsHdu_Int32Data* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fits_proto.FitsHdu.Int32Data";
  }
  protected:
  explicit FitsHdu_Int32Data(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // repeated int32 data = 1;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  private:
  int32_t _internal_data(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_data() const;
  void _internal_add_data(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_data();
  public:
  int32_t data(int index) const;
  void set_data(int index, int32_t value);
  void add_data(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      data() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_data();

  // @@protoc_insertion_point(class_scope:fits_proto.FitsHdu.Int32Data)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > data_;
    mutable std::atomic<int> _data_cached_byte_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_fits_2eproto;
};
// -------------------------------------------------------------------

class FitsHdu_Int64Data final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fits_proto.FitsHdu.Int64Data) */ {
 public:
  inline FitsHdu_Int64Data() : FitsHdu_Int64Data(nullptr) {}
  ~FitsHdu_Int64Data() override;
  explicit PROTOBUF_CONSTEXPR FitsHdu_Int64Data(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FitsHdu_Int64Data(const FitsHdu_Int64Data& from);
  FitsHdu_Int64Data(FitsHdu_Int64Data&& from) noexcept
    : FitsHdu_Int64Data() {
    *this = ::std::move(from);
  }

  inline FitsHdu_Int64Data& operator=(const FitsHdu_Int64Data& from) {
    CopyFrom(from);
    return *this;
  }
  inline FitsHdu_Int64Data& operator=(FitsHdu_Int64Data&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FitsHdu_Int64Data& default_instance() {
    return *internal_default_instance();
  }
  static inline const FitsHdu_Int64Data* internal_default_instance() {
    return reinterpret_cast<const FitsHdu_Int64Data*>(
               &_FitsHdu_Int64Data_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(FitsHdu_Int64Data& a, FitsHdu_Int64Data& b) {
    a.Swap(&b);
  }
  inline void Swap(FitsHdu_Int64Data* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FitsHdu_Int64Data* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FitsHdu_Int64Data* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FitsHdu_Int64Data>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FitsHdu_Int64Data& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FitsHdu_Int64Data& from) {
    FitsHdu_Int64Data::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FitsHdu_Int64Data* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fits_proto.FitsHdu.Int64Data";
  }
  protected:
  explicit FitsHdu_Int64Data(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // repeated int64 data = 1;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  private:
  int64_t _internal_data(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_data() const;
  void _internal_add_data(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_data();
  public:
  int64_t data(int index) const;
  void set_data(int index, int64_t value);
  void add_data(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      data() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_data();

  // @@protoc_insertion_point(class_scope:fits_proto.FitsHdu.Int64Data)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > data_;
    mutable std::atomic<int> _data_cached_byte_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_fits_2eproto;
};
// -------------------------------------------------------------------

class FitsHdu_SInt32Data final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fits_proto.FitsHdu.SInt32Data) */ {
 public:
  inline FitsHdu_SInt32Data() : FitsHdu_SInt32Data(nullptr) {}
  ~FitsHdu_SInt32Data() override;
  explicit PROTOBUF_CONSTEXPR FitsHdu_SInt32Data(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FitsHdu_SInt32Data(const FitsHdu_SInt32Data& from);
  FitsHdu_SInt32Data(FitsHdu_SInt32Data&& from) noexcept
    : FitsHdu_SInt32Data() {
    *this = ::std::move(from);
  }

  inline FitsHdu_SInt32Data& operator=(const FitsHdu_SInt32Data& from) {
    CopyFrom(from);
    return *this;
  }
  inline FitsHdu_SInt32Data& operator=(FitsHdu_SInt32Data&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FitsHdu_SInt32Data& default_instance() {
    return *internal_default_instance();
  }
  static inline const FitsHdu_SInt32Data* internal_default_instance() {
    return reinterpret_cast<const FitsHdu_SInt32Data*>(
               &_FitsHdu_SInt32Data_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(FitsHdu_SInt32Data& a, FitsHdu_SInt32Data& b) {
    a.Swap(&b);
  }
  inline void Swap(FitsHdu_SInt32Data* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FitsHdu_SInt32Data* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FitsHdu_SInt32Data* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FitsHdu_SInt32Data>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FitsHdu_SInt32Data& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FitsHdu_SInt32Data& from) {
    FitsHdu_SInt32Data::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FitsHdu_SInt32Data* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fits_proto.FitsHdu.SInt32Data";
  }
  protected:
  explicit FitsHdu_SInt32Data(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // repeated sint32 data = 1;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  private:
  int32_t _internal_data(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_data() const;
  void _internal_add_data(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_data();
  public:
  int32_t data(int index) const;
  void set_data(int index, int32_t value);
  void add_data(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      data() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_data();

  // @@protoc_insertion_point(class_scope:fits_proto.FitsHdu.SInt32Data)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > data_;
    mutable std::atomic<int> _data_cached_byte_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_fits_2eproto;
};
// -------------------------------------------------------------------

class FitsHdu_SInt64Data final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fits_proto.FitsHdu.SInt64Data) */ {
 public:
  inline FitsHdu_SInt64Data() : FitsHdu_SInt64Data(nullptr) {}
  ~FitsHdu_SInt64Data() override;
  explicit PROTOBUF_CONSTEXPR FitsHdu_SInt64Data(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FitsHdu_SInt64Data(const FitsHdu_SInt64Data& from);
  FitsHdu_SInt64Data(FitsHdu_SInt64Data&& from) noexcept
    : FitsHdu_SInt64Data() {
    *this = ::std::move(from);
  }

  inline FitsHdu_SInt64Data& operator=(const FitsHdu_SInt64Data& from) {
    CopyFrom(from);
    return *this;
  }
  inline FitsHdu_SInt64Data& operator=(FitsHdu_SInt64Data&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FitsHdu_SInt64Data& default_instance() {
    return *internal_default_instance();
  }
  static inline const FitsHdu_SInt64Data* internal_default_instance() {
    return reinterpret_cast<const FitsHdu_SInt64Data*>(
               &_FitsHdu_SInt64Data_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(FitsHdu_SInt64Data& a, FitsHdu_SInt64Data& b) {
    a.Swap(&b);
  }
  inline void Swap(FitsHdu_SInt64Data* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FitsHdu_SInt64Data* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FitsHdu_SInt64Data* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FitsHdu_SInt64Data>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FitsHdu_SInt64Data& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FitsHdu_SInt64Data& from) {
    FitsHdu_SInt64Data::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FitsHdu_SInt64Data* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fits_proto.FitsHdu.SInt64Data";
  }
  protected:
  explicit FitsHdu_SInt64Data(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // repeated sint64 data = 1;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  private:
  int64_t _internal_data(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_data() const;
  void _internal_add_data(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_data();
  public:
  int64_t data(int index) const;
  void set_data(int index, int64_t value);
  void add_data(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      data() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_data();

  // @@protoc_insertion_point(class_scope:fits_proto.FitsHdu.SInt64Data)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > data_;
    mutable std::atomic<int> _data_cached_byte_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_fits_2eproto;
};
// -------------------------------------------------------------------

class FitsHdu final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fits_proto.FitsHdu) */ {
 public:
  inline FitsHdu() : FitsHdu(nullptr) {}
  ~FitsHdu() override;
  explicit PROTOBUF_CONSTEXPR FitsHdu(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FitsHdu(const FitsHdu& from);
  FitsHdu(FitsHdu&& from) noexcept
    : FitsHdu() {
    *this = ::std::move(from);
  }

  inline FitsHdu& operator=(const FitsHdu& from) {
    CopyFrom(from);
    return *this;
  }
  inline FitsHdu& operator=(FitsHdu&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FitsHdu& default_instance() {
    return *internal_default_instance();
  }
  enum PayloadCase {
    kFloatData = 2,
    kDoubleData = 3,
    kInt32Data = 4,
    kInt64Data = 5,
    kSint32Data = 6,
    kSint64Data = 7,
    PAYLOAD_NOT_SET = 0,
  };

  static inline const FitsHdu* internal_default_instance() {
    return reinterpret_cast<const FitsHdu*>(
               &_FitsHdu_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(FitsHdu& a, FitsHdu& b) {
    a.Swap(&b);
  }
  inline void Swap(FitsHdu* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FitsHdu* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FitsHdu* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FitsHdu>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FitsHdu& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FitsHdu& from) {
    FitsHdu::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FitsHdu* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fits_proto.FitsHdu";
  }
  protected:
  explicit FitsHdu(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef FitsHdu_FloatData FloatData;
  typedef FitsHdu_DoubleData DoubleData;
  typedef FitsHdu_Int32Data Int32Data;
  typedef FitsHdu_Int64Data Int64Data;
  typedef FitsHdu_SInt32Data SInt32Data;
  typedef FitsHdu_SInt64Data SInt64Data;

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kFloatDataFieldNumber = 2,
    kDoubleDataFieldNumber = 3,
    kInt32DataFieldNumber = 4,
    kInt64DataFieldNumber = 5,
    kSint32DataFieldNumber = 6,
    kSint64DataFieldNumber = 7,
  };
  // repeated .fits_proto.FitsHeader header = 1;
  int header_size() const;
  private:
  int _internal_header_size() const;
  public:
  void clear_header();
  ::fits_proto::FitsHeader* mutable_header(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fits_proto::FitsHeader >*
      mutable_header();
  private:
  const ::fits_proto::FitsHeader& _internal_header(int index) const;
  ::fits_proto::FitsHeader* _internal_add_header();
  public:
  const ::fits_proto::FitsHeader& header(int index) const;
  ::fits_proto::FitsHeader* add_header();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fits_proto::FitsHeader >&
      header() const;

  // .fits_proto.FitsHdu.FloatData float_data = 2;
  bool has_float_data() const;
  private:
  bool _internal_has_float_data() const;
  public:
  void clear_float_data();
  const ::fits_proto::FitsHdu_FloatData& float_data() const;
  PROTOBUF_NODISCARD ::fits_proto::FitsHdu_FloatData* release_float_data();
  ::fits_proto::FitsHdu_FloatData* mutable_float_data();
  void set_allocated_float_data(::fits_proto::FitsHdu_FloatData* float_data);
  private:
  const ::fits_proto::FitsHdu_FloatData& _internal_float_data() const;
  ::fits_proto::FitsHdu_FloatData* _internal_mutable_float_data();
  public:
  void unsafe_arena_set_allocated_float_data(
      ::fits_proto::FitsHdu_FloatData* float_data);
  ::fits_proto::FitsHdu_FloatData* unsafe_arena_release_float_data();

  // .fits_proto.FitsHdu.DoubleData double_data = 3;
  bool has_double_data() const;
  private:
  bool _internal_has_double_data() const;
  public:
  void clear_double_data();
  const ::fits_proto::FitsHdu_DoubleData& double_data() const;
  PROTOBUF_NODISCARD ::fits_proto::FitsHdu_DoubleData* release_double_data();
  ::fits_proto::FitsHdu_DoubleData* mutable_double_data();
  void set_allocated_double_data(::fits_proto::FitsHdu_DoubleData* double_data);
  private:
  const ::fits_proto::FitsHdu_DoubleData& _internal_double_data() const;
  ::fits_proto::FitsHdu_DoubleData* _internal_mutable_double_data();
  public:
  void unsafe_arena_set_allocated_double_data(
      ::fits_proto::FitsHdu_DoubleData* double_data);
  ::fits_proto::FitsHdu_DoubleData* unsafe_arena_release_double_data();

  // .fits_proto.FitsHdu.Int32Data int32_data = 4;
  bool has_int32_data() const;
  private:
  bool _internal_has_int32_data() const;
  public:
  void clear_int32_data();
  const ::fits_proto::FitsHdu_Int32Data& int32_data() const;
  PROTOBUF_NODISCARD ::fits_proto::FitsHdu_Int32Data* release_int32_data();
  ::fits_proto::FitsHdu_Int32Data* mutable_int32_data();
  void set_allocated_int32_data(::fits_proto::FitsHdu_Int32Data* int32_data);
  private:
  const ::fits_proto::FitsHdu_Int32Data& _internal_int32_data() const;
  ::fits_proto::FitsHdu_Int32Data* _internal_mutable_int32_data();
  public:
  void unsafe_arena_set_allocated_int32_data(
      ::fits_proto::FitsHdu_Int32Data* int32_data);
  ::fits_proto::FitsHdu_Int32Data* unsafe_arena_release_int32_data();

  // .fits_proto.FitsHdu.Int64Data int64_data = 5;
  bool has_int64_data() const;
  private:
  bool _internal_has_int64_data() const;
  public:
  void clear_int64_data();
  const ::fits_proto::FitsHdu_Int64Data& int64_data() const;
  PROTOBUF_NODISCARD ::fits_proto::FitsHdu_Int64Data* release_int64_data();
  ::fits_proto::FitsHdu_Int64Data* mutable_int64_data();
  void set_allocated_int64_data(::fits_proto::FitsHdu_Int64Data* int64_data);
  private:
  const ::fits_proto::FitsHdu_Int64Data& _internal_int64_data() const;
  ::fits_proto::FitsHdu_Int64Data* _internal_mutable_int64_data();
  public:
  void unsafe_arena_set_allocated_int64_data(
      ::fits_proto::FitsHdu_Int64Data* int64_data);
  ::fits_proto::FitsHdu_Int64Data* unsafe_arena_release_int64_data();

  // .fits_proto.FitsHdu.SInt32Data sint32_data = 6;
  bool has_sint32_data() const;
  private:
  bool _internal_has_sint32_data() const;
  public:
  void clear_sint32_data();
  const ::fits_proto::FitsHdu_SInt32Data& sint32_data() const;
  PROTOBUF_NODISCARD ::fits_proto::FitsHdu_SInt32Data* release_sint32_data();
  ::fits_proto::FitsHdu_SInt32Data* mutable_sint32_data();
  void set_allocated_sint32_data(::fits_proto::FitsHdu_SInt32Data* sint32_data);
  private:
  const ::fits_proto::FitsHdu_SInt32Data& _internal_sint32_data() const;
  ::fits_proto::FitsHdu_SInt32Data* _internal_mutable_sint32_data();
  public:
  void unsafe_arena_set_allocated_sint32_data(
      ::fits_proto::FitsHdu_SInt32Data* sint32_data);
  ::fits_proto::FitsHdu_SInt32Data* unsafe_arena_release_sint32_data();

  // .fits_proto.FitsHdu.SInt64Data sint64_data = 7;
  bool has_sint64_data() const;
  private:
  bool _internal_has_sint64_data() const;
  public:
  void clear_sint64_data();
  const ::fits_proto::FitsHdu_SInt64Data& sint64_data() const;
  PROTOBUF_NODISCARD ::fits_proto::FitsHdu_SInt64Data* release_sint64_data();
  ::fits_proto::FitsHdu_SInt64Data* mutable_sint64_data();
  void set_allocated_sint64_data(::fits_proto::FitsHdu_SInt64Data* sint64_data);
  private:
  const ::fits_proto::FitsHdu_SInt64Data& _internal_sint64_data() const;
  ::fits_proto::FitsHdu_SInt64Data* _internal_mutable_sint64_data();
  public:
  void unsafe_arena_set_allocated_sint64_data(
      ::fits_proto::FitsHdu_SInt64Data* sint64_data);
  ::fits_proto::FitsHdu_SInt64Data* unsafe_arena_release_sint64_data();

  void clear_payload();
  PayloadCase payload_case() const;
  // @@protoc_insertion_point(class_scope:fits_proto.FitsHdu)
 private:
  class _Internal;
  void set_has_float_data();
  void set_has_double_data();
  void set_has_int32_data();
  void set_has_int64_data();
  void set_has_sint32_data();
  void set_has_sint64_data();

  inline bool has_payload() const;
  inline void clear_has_payload();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fits_proto::FitsHeader > header_;
    union PayloadUnion {
      constexpr PayloadUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::fits_proto::FitsHdu_FloatData* float_data_;
      ::fits_proto::FitsHdu_DoubleData* double_data_;
      ::fits_proto::FitsHdu_Int32Data* int32_data_;
      ::fits_proto::FitsHdu_Int64Data* int64_data_;
      ::fits_proto::FitsHdu_SInt32Data* sint32_data_;
      ::fits_proto::FitsHdu_SInt64Data* sint64_data_;
    } payload_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_fits_2eproto;
};
// -------------------------------------------------------------------

class Fits final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fits_proto.Fits) */ {
 public:
  inline Fits() : Fits(nullptr) {}
  ~Fits() override;
  explicit PROTOBUF_CONSTEXPR Fits(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Fits(const Fits& from);
  Fits(Fits&& from) noexcept
    : Fits() {
    *this = ::std::move(from);
  }

  inline Fits& operator=(const Fits& from) {
    CopyFrom(from);
    return *this;
  }
  inline Fits& operator=(Fits&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Fits& default_instance() {
    return *internal_default_instance();
  }
  static inline const Fits* internal_default_instance() {
    return reinterpret_cast<const Fits*>(
               &_Fits_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(Fits& a, Fits& b) {
    a.Swap(&b);
  }
  inline void Swap(Fits* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Fits* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Fits* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Fits>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Fits& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Fits& from) {
    Fits::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Fits* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fits_proto.Fits";
  }
  protected:
  explicit Fits(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHduFieldNumber = 1,
  };
  // repeated .fits_proto.FitsHdu hdu = 1;
  int hdu_size() const;
  private:
  int _internal_hdu_size() const;
  public:
  void clear_hdu();
  ::fits_proto::FitsHdu* mutable_hdu(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fits_proto::FitsHdu >*
      mutable_hdu();
  private:
  const ::fits_proto::FitsHdu& _internal_hdu(int index) const;
  ::fits_proto::FitsHdu* _internal_add_hdu();
  public:
  const ::fits_proto::FitsHdu& hdu(int index) const;
  ::fits_proto::FitsHdu* add_hdu();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fits_proto::FitsHdu >&
      hdu() const;

  // @@protoc_insertion_point(class_scope:fits_proto.Fits)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fits_proto::FitsHdu > hdu_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_fits_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// KeywordData

// string string_val = 1;
inline bool KeywordData::_internal_has_string_val() const {
  return value_case() == kStringVal;
}
inline bool KeywordData::has_string_val() const {
  return _internal_has_string_val();
}
inline void KeywordData::set_has_string_val() {
  _impl_._oneof_case_[0] = kStringVal;
}
inline void KeywordData::clear_string_val() {
  if (_internal_has_string_val()) {
    _impl_.value_.string_val_.Destroy();
    clear_has_value();
  }
}
inline const std::string& KeywordData::string_val() const {
  // @@protoc_insertion_point(field_get:fits_proto.KeywordData.string_val)
  return _internal_string_val();
}
template <typename ArgT0, typename... ArgT>
inline void KeywordData::set_string_val(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_string_val()) {
    clear_value();
    set_has_string_val();
    _impl_.value_.string_val_.InitDefault();
  }
  _impl_.value_.string_val_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:fits_proto.KeywordData.string_val)
}
inline std::string* KeywordData::mutable_string_val() {
  std::string* _s = _internal_mutable_string_val();
  // @@protoc_insertion_point(field_mutable:fits_proto.KeywordData.string_val)
  return _s;
}
inline const std::string& KeywordData::_internal_string_val() const {
  if (_internal_has_string_val()) {
    return _impl_.value_.string_val_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void KeywordData::_internal_set_string_val(const std::string& value) {
  if (!_internal_has_string_val()) {
    clear_value();
    set_has_string_val();
    _impl_.value_.string_val_.InitDefault();
  }
  _impl_.value_.string_val_.Set(value, GetArenaForAllocation());
}
inline std::string* KeywordData::_internal_mutable_string_val() {
  if (!_internal_has_string_val()) {
    clear_value();
    set_has_string_val();
    _impl_.value_.string_val_.InitDefault();
  }
  return _impl_.value_.string_val_.Mutable(      GetArenaForAllocation());
}
inline std::string* KeywordData::release_string_val() {
  // @@protoc_insertion_point(field_release:fits_proto.KeywordData.string_val)
  if (_internal_has_string_val()) {
    clear_has_value();
    return _impl_.value_.string_val_.Release();
  } else {
    return nullptr;
  }
}
inline void KeywordData::set_allocated_string_val(std::string* string_val) {
  if (has_value()) {
    clear_value();
  }
  if (string_val != nullptr) {
    set_has_string_val();
    _impl_.value_.string_val_.InitAllocated(string_val, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:fits_proto.KeywordData.string_val)
}

// int32 int32_val = 2;
inline bool KeywordData::_internal_has_int32_val() const {
  return value_case() == kInt32Val;
}
inline bool KeywordData::has_int32_val() const {
  return _internal_has_int32_val();
}
inline void KeywordData::set_has_int32_val() {
  _impl_._oneof_case_[0] = kInt32Val;
}
inline void KeywordData::clear_int32_val() {
  if (_internal_has_int32_val()) {
    _impl_.value_.int32_val_ = 0;
    clear_has_value();
  }
}
inline int32_t KeywordData::_internal_int32_val() const {
  if (_internal_has_int32_val()) {
    return _impl_.value_.int32_val_;
  }
  return 0;
}
inline void KeywordData::_internal_set_int32_val(int32_t value) {
  if (!_internal_has_int32_val()) {
    clear_value();
    set_has_int32_val();
  }
  _impl_.value_.int32_val_ = value;
}
inline int32_t KeywordData::int32_val() const {
  // @@protoc_insertion_point(field_get:fits_proto.KeywordData.int32_val)
  return _internal_int32_val();
}
inline void KeywordData::set_int32_val(int32_t value) {
  _internal_set_int32_val(value);
  // @@protoc_insertion_point(field_set:fits_proto.KeywordData.int32_val)
}

// sint32 sint32_val = 3;
inline bool KeywordData::_internal_has_sint32_val() const {
  return value_case() == kSint32Val;
}
inline bool KeywordData::has_sint32_val() const {
  return _internal_has_sint32_val();
}
inline void KeywordData::set_has_sint32_val() {
  _impl_._oneof_case_[0] = kSint32Val;
}
inline void KeywordData::clear_sint32_val() {
  if (_internal_has_sint32_val()) {
    _impl_.value_.sint32_val_ = 0;
    clear_has_value();
  }
}
inline int32_t KeywordData::_internal_sint32_val() const {
  if (_internal_has_sint32_val()) {
    return _impl_.value_.sint32_val_;
  }
  return 0;
}
inline void KeywordData::_internal_set_sint32_val(int32_t value) {
  if (!_internal_has_sint32_val()) {
    clear_value();
    set_has_sint32_val();
  }
  _impl_.value_.sint32_val_ = value;
}
inline int32_t KeywordData::sint32_val() const {
  // @@protoc_insertion_point(field_get:fits_proto.KeywordData.sint32_val)
  return _internal_sint32_val();
}
inline void KeywordData::set_sint32_val(int32_t value) {
  _internal_set_sint32_val(value);
  // @@protoc_insertion_point(field_set:fits_proto.KeywordData.sint32_val)
}

// int64 int64_val = 4;
inline bool KeywordData::_internal_has_int64_val() const {
  return value_case() == kInt64Val;
}
inline bool KeywordData::has_int64_val() const {
  return _internal_has_int64_val();
}
inline void KeywordData::set_has_int64_val() {
  _impl_._oneof_case_[0] = kInt64Val;
}
inline void KeywordData::clear_int64_val() {
  if (_internal_has_int64_val()) {
    _impl_.value_.int64_val_ = int64_t{0};
    clear_has_value();
  }
}
inline int64_t KeywordData::_internal_int64_val() const {
  if (_internal_has_int64_val()) {
    return _impl_.value_.int64_val_;
  }
  return int64_t{0};
}
inline void KeywordData::_internal_set_int64_val(int64_t value) {
  if (!_internal_has_int64_val()) {
    clear_value();
    set_has_int64_val();
  }
  _impl_.value_.int64_val_ = value;
}
inline int64_t KeywordData::int64_val() const {
  // @@protoc_insertion_point(field_get:fits_proto.KeywordData.int64_val)
  return _internal_int64_val();
}
inline void KeywordData::set_int64_val(int64_t value) {
  _internal_set_int64_val(value);
  // @@protoc_insertion_point(field_set:fits_proto.KeywordData.int64_val)
}

// sint64 sint64_val = 5;
inline bool KeywordData::_internal_has_sint64_val() const {
  return value_case() == kSint64Val;
}
inline bool KeywordData::has_sint64_val() const {
  return _internal_has_sint64_val();
}
inline void KeywordData::set_has_sint64_val() {
  _impl_._oneof_case_[0] = kSint64Val;
}
inline void KeywordData::clear_sint64_val() {
  if (_internal_has_sint64_val()) {
    _impl_.value_.sint64_val_ = int64_t{0};
    clear_has_value();
  }
}
inline int64_t KeywordData::_internal_sint64_val() const {
  if (_internal_has_sint64_val()) {
    return _impl_.value_.sint64_val_;
  }
  return int64_t{0};
}
inline void KeywordData::_internal_set_sint64_val(int64_t value) {
  if (!_internal_has_sint64_val()) {
    clear_value();
    set_has_sint64_val();
  }
  _impl_.value_.sint64_val_ = value;
}
inline int64_t KeywordData::sint64_val() const {
  // @@protoc_insertion_point(field_get:fits_proto.KeywordData.sint64_val)
  return _internal_sint64_val();
}
inline void KeywordData::set_sint64_val(int64_t value) {
  _internal_set_sint64_val(value);
  // @@protoc_insertion_point(field_set:fits_proto.KeywordData.sint64_val)
}

// float float_val = 6;
inline bool KeywordData::_internal_has_float_val() const {
  return value_case() == kFloatVal;
}
inline bool KeywordData::has_float_val() const {
  return _internal_has_float_val();
}
inline void KeywordData::set_has_float_val() {
  _impl_._oneof_case_[0] = kFloatVal;
}
inline void KeywordData::clear_float_val() {
  if (_internal_has_float_val()) {
    _impl_.value_.float_val_ = 0;
    clear_has_value();
  }
}
inline float KeywordData::_internal_float_val() const {
  if (_internal_has_float_val()) {
    return _impl_.value_.float_val_;
  }
  return 0;
}
inline void KeywordData::_internal_set_float_val(float value) {
  if (!_internal_has_float_val()) {
    clear_value();
    set_has_float_val();
  }
  _impl_.value_.float_val_ = value;
}
inline float KeywordData::float_val() const {
  // @@protoc_insertion_point(field_get:fits_proto.KeywordData.float_val)
  return _internal_float_val();
}
inline void KeywordData::set_float_val(float value) {
  _internal_set_float_val(value);
  // @@protoc_insertion_point(field_set:fits_proto.KeywordData.float_val)
}

// double double_val = 7;
inline bool KeywordData::_internal_has_double_val() const {
  return value_case() == kDoubleVal;
}
inline bool KeywordData::has_double_val() const {
  return _internal_has_double_val();
}
inline void KeywordData::set_has_double_val() {
  _impl_._oneof_case_[0] = kDoubleVal;
}
inline void KeywordData::clear_double_val() {
  if (_internal_has_double_val()) {
    _impl_.value_.double_val_ = 0;
    clear_has_value();
  }
}
inline double KeywordData::_internal_double_val() const {
  if (_internal_has_double_val()) {
    return _impl_.value_.double_val_;
  }
  return 0;
}
inline void KeywordData::_internal_set_double_val(double value) {
  if (!_internal_has_double_val()) {
    clear_value();
    set_has_double_val();
  }
  _impl_.value_.double_val_ = value;
}
inline double KeywordData::double_val() const {
  // @@protoc_insertion_point(field_get:fits_proto.KeywordData.double_val)
  return _internal_double_val();
}
inline void KeywordData::set_double_val(double value) {
  _internal_set_double_val(value);
  // @@protoc_insertion_point(field_set:fits_proto.KeywordData.double_val)
}

// bool bool_val = 8;
inline bool KeywordData::_internal_has_bool_val() const {
  return value_case() == kBoolVal;
}
inline bool KeywordData::has_bool_val() const {
  return _internal_has_bool_val();
}
inline void KeywordData::set_has_bool_val() {
  _impl_._oneof_case_[0] = kBoolVal;
}
inline void KeywordData::clear_bool_val() {
  if (_internal_has_bool_val()) {
    _impl_.value_.bool_val_ = false;
    clear_has_value();
  }
}
inline bool KeywordData::_internal_bool_val() const {
  if (_internal_has_bool_val()) {
    return _impl_.value_.bool_val_;
  }
  return false;
}
inline void KeywordData::_internal_set_bool_val(bool value) {
  if (!_internal_has_bool_val()) {
    clear_value();
    set_has_bool_val();
  }
  _impl_.value_.bool_val_ = value;
}
inline bool KeywordData::bool_val() const {
  // @@protoc_insertion_point(field_get:fits_proto.KeywordData.bool_val)
  return _internal_bool_val();
}
inline void KeywordData::set_bool_val(bool value) {
  _internal_set_bool_val(value);
  // @@protoc_insertion_point(field_set:fits_proto.KeywordData.bool_val)
}

// string comment = 9;
inline void KeywordData::clear_comment() {
  _impl_.comment_.ClearToEmpty();
}
inline const std::string& KeywordData::comment() const {
  // @@protoc_insertion_point(field_get:fits_proto.KeywordData.comment)
  return _internal_comment();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void KeywordData::set_comment(ArgT0&& arg0, ArgT... args) {
 
 _impl_.comment_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:fits_proto.KeywordData.comment)
}
inline std::string* KeywordData::mutable_comment() {
  std::string* _s = _internal_mutable_comment();
  // @@protoc_insertion_point(field_mutable:fits_proto.KeywordData.comment)
  return _s;
}
inline const std::string& KeywordData::_internal_comment() const {
  return _impl_.comment_.Get();
}
inline void KeywordData::_internal_set_comment(const std::string& value) {
  
  _impl_.comment_.Set(value, GetArenaForAllocation());
}
inline std::string* KeywordData::_internal_mutable_comment() {
  
  return _impl_.comment_.Mutable(GetArenaForAllocation());
}
inline std::string* KeywordData::release_comment() {
  // @@protoc_insertion_point(field_release:fits_proto.KeywordData.comment)
  return _impl_.comment_.Release();
}
inline void KeywordData::set_allocated_comment(std::string* comment) {
  if (comment != nullptr) {
    
  } else {
    
  }
  _impl_.comment_.SetAllocated(comment, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.comment_.IsDefault()) {
    _impl_.comment_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fits_proto.KeywordData.comment)
}

inline bool KeywordData::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void KeywordData::clear_has_value() {
  _impl_._oneof_case_[0] = VALUE_NOT_SET;
}
inline KeywordData::ValueCase KeywordData::value_case() const {
  return KeywordData::ValueCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// FitsHeader

// bool simple = 1;
inline void FitsHeader::clear_simple() {
  _impl_.simple_ = false;
}
inline bool FitsHeader::_internal_simple() const {
  return _impl_.simple_;
}
inline bool FitsHeader::simple() const {
  // @@protoc_insertion_point(field_get:fits_proto.FitsHeader.simple)
  return _internal_simple();
}
inline void FitsHeader::_internal_set_simple(bool value) {
  
  _impl_.simple_ = value;
}
inline void FitsHeader::set_simple(bool value) {
  _internal_set_simple(value);
  // @@protoc_insertion_point(field_set:fits_proto.FitsHeader.simple)
}

// int32 bitpix = 2;
inline void FitsHeader::clear_bitpix() {
  _impl_.bitpix_ = 0;
}
inline int32_t FitsHeader::_internal_bitpix() const {
  return _impl_.bitpix_;
}
inline int32_t FitsHeader::bitpix() const {
  // @@protoc_insertion_point(field_get:fits_proto.FitsHeader.bitpix)
  return _internal_bitpix();
}
inline void FitsHeader::_internal_set_bitpix(int32_t value) {
  
  _impl_.bitpix_ = value;
}
inline void FitsHeader::set_bitpix(int32_t value) {
  _internal_set_bitpix(value);
  // @@protoc_insertion_point(field_set:fits_proto.FitsHeader.bitpix)
}

// repeated int32 size = 3;
inline int FitsHeader::_internal_size_size() const {
  return _impl_.size_.size();
}
inline int FitsHeader::size_size() const {
  return _internal_size_size();
}
inline void FitsHeader::clear_size() {
  _impl_.size_.Clear();
}
inline int32_t FitsHeader::_internal_size(int index) const {
  return _impl_.size_.Get(index);
}
inline int32_t FitsHeader::size(int index) const {
  // @@protoc_insertion_point(field_get:fits_proto.FitsHeader.size)
  return _internal_size(index);
}
inline void FitsHeader::set_size(int index, int32_t value) {
  _impl_.size_.Set(index, value);
  // @@protoc_insertion_point(field_set:fits_proto.FitsHeader.size)
}
inline void FitsHeader::_internal_add_size(int32_t value) {
  _impl_.size_.Add(value);
}
inline void FitsHeader::add_size(int32_t value) {
  _internal_add_size(value);
  // @@protoc_insertion_point(field_add:fits_proto.FitsHeader.size)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
FitsHeader::_internal_size() const {
  return _impl_.size_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
FitsHeader::size() const {
  // @@protoc_insertion_point(field_list:fits_proto.FitsHeader.size)
  return _internal_size();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
FitsHeader::_internal_mutable_size() {
  return &_impl_.size_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
FitsHeader::mutable_size() {
  // @@protoc_insertion_point(field_mutable_list:fits_proto.FitsHeader.size)
  return _internal_mutable_size();
}

// string comment = 4;
inline void FitsHeader::clear_comment() {
  _impl_.comment_.ClearToEmpty();
}
inline const std::string& FitsHeader::comment() const {
  // @@protoc_insertion_point(field_get:fits_proto.FitsHeader.comment)
  return _internal_comment();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FitsHeader::set_comment(ArgT0&& arg0, ArgT... args) {
 
 _impl_.comment_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:fits_proto.FitsHeader.comment)
}
inline std::string* FitsHeader::mutable_comment() {
  std::string* _s = _internal_mutable_comment();
  // @@protoc_insertion_point(field_mutable:fits_proto.FitsHeader.comment)
  return _s;
}
inline const std::string& FitsHeader::_internal_comment() const {
  return _impl_.comment_.Get();
}
inline void FitsHeader::_internal_set_comment(const std::string& value) {
  
  _impl_.comment_.Set(value, GetArenaForAllocation());
}
inline std::string* FitsHeader::_internal_mutable_comment() {
  
  return _impl_.comment_.Mutable(GetArenaForAllocation());
}
inline std::string* FitsHeader::release_comment() {
  // @@protoc_insertion_point(field_release:fits_proto.FitsHeader.comment)
  return _impl_.comment_.Release();
}
inline void FitsHeader::set_allocated_comment(std::string* comment) {
  if (comment != nullptr) {
    
  } else {
    
  }
  _impl_.comment_.SetAllocated(comment, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.comment_.IsDefault()) {
    _impl_.comment_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fits_proto.FitsHeader.comment)
}

// string history = 5;
inline void FitsHeader::clear_history() {
  _impl_.history_.ClearToEmpty();
}
inline const std::string& FitsHeader::history() const {
  // @@protoc_insertion_point(field_get:fits_proto.FitsHeader.history)
  return _internal_history();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FitsHeader::set_history(ArgT0&& arg0, ArgT... args) {
 
 _impl_.history_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:fits_proto.FitsHeader.history)
}
inline std::string* FitsHeader::mutable_history() {
  std::string* _s = _internal_mutable_history();
  // @@protoc_insertion_point(field_mutable:fits_proto.FitsHeader.history)
  return _s;
}
inline const std::string& FitsHeader::_internal_history() const {
  return _impl_.history_.Get();
}
inline void FitsHeader::_internal_set_history(const std::string& value) {
  
  _impl_.history_.Set(value, GetArenaForAllocation());
}
inline std::string* FitsHeader::_internal_mutable_history() {
  
  return _impl_.history_.Mutable(GetArenaForAllocation());
}
inline std::string* FitsHeader::release_history() {
  // @@protoc_insertion_point(field_release:fits_proto.FitsHeader.history)
  return _impl_.history_.Release();
}
inline void FitsHeader::set_allocated_history(std::string* history) {
  if (history != nullptr) {
    
  } else {
    
  }
  _impl_.history_.SetAllocated(history, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.history_.IsDefault()) {
    _impl_.history_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fits_proto.FitsHeader.history)
}

// int32 n_extensions = 6;
inline void FitsHeader::clear_n_extensions() {
  _impl_.n_extensions_ = 0;
}
inline int32_t FitsHeader::_internal_n_extensions() const {
  return _impl_.n_extensions_;
}
inline int32_t FitsHeader::n_extensions() const {
  // @@protoc_insertion_point(field_get:fits_proto.FitsHeader.n_extensions)
  return _internal_n_extensions();
}
inline void FitsHeader::_internal_set_n_extensions(int32_t value) {
  
  _impl_.n_extensions_ = value;
}
inline void FitsHeader::set_n_extensions(int32_t value) {
  _internal_set_n_extensions(value);
  // @@protoc_insertion_point(field_set:fits_proto.FitsHeader.n_extensions)
}

// string extension = 7;
inline void FitsHeader::clear_extension() {
  _impl_.extension_.ClearToEmpty();
}
inline const std::string& FitsHeader::extension() const {
  // @@protoc_insertion_point(field_get:fits_proto.FitsHeader.extension)
  return _internal_extension();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FitsHeader::set_extension(ArgT0&& arg0, ArgT... args) {
 
 _impl_.extension_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:fits_proto.FitsHeader.extension)
}
inline std::string* FitsHeader::mutable_extension() {
  std::string* _s = _internal_mutable_extension();
  // @@protoc_insertion_point(field_mutable:fits_proto.FitsHeader.extension)
  return _s;
}
inline const std::string& FitsHeader::_internal_extension() const {
  return _impl_.extension_.Get();
}
inline void FitsHeader::_internal_set_extension(const std::string& value) {
  
  _impl_.extension_.Set(value, GetArenaForAllocation());
}
inline std::string* FitsHeader::_internal_mutable_extension() {
  
  return _impl_.extension_.Mutable(GetArenaForAllocation());
}
inline std::string* FitsHeader::release_extension() {
  // @@protoc_insertion_point(field_release:fits_proto.FitsHeader.extension)
  return _impl_.extension_.Release();
}
inline void FitsHeader::set_allocated_extension(std::string* extension) {
  if (extension != nullptr) {
    
  } else {
    
  }
  _impl_.extension_.SetAllocated(extension, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.extension_.IsDefault()) {
    _impl_.extension_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fits_proto.FitsHeader.extension)
}

// map<string, .fits_proto.KeywordData> keywords = 8;
inline int FitsHeader::_internal_keywords_size() const {
  return _impl_.keywords_.size();
}
inline int FitsHeader::keywords_size() const {
  return _internal_keywords_size();
}
inline void FitsHeader::clear_keywords() {
  _impl_.keywords_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::fits_proto::KeywordData >&
FitsHeader::_internal_keywords() const {
  return _impl_.keywords_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::fits_proto::KeywordData >&
FitsHeader::keywords() const {
  // @@protoc_insertion_point(field_map:fits_proto.FitsHeader.keywords)
  return _internal_keywords();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::fits_proto::KeywordData >*
FitsHeader::_internal_mutable_keywords() {
  return _impl_.keywords_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::fits_proto::KeywordData >*
FitsHeader::mutable_keywords() {
  // @@protoc_insertion_point(field_mutable_map:fits_proto.FitsHeader.keywords)
  return _internal_mutable_keywords();
}

// -------------------------------------------------------------------

// FitsHdu_FloatData

// repeated float data = 1;
inline int FitsHdu_FloatData::_internal_data_size() const {
  return _impl_.data_.size();
}
inline int FitsHdu_FloatData::data_size() const {
  return _internal_data_size();
}
inline void FitsHdu_FloatData::clear_data() {
  _impl_.data_.Clear();
}
inline float FitsHdu_FloatData::_internal_data(int index) const {
  return _impl_.data_.Get(index);
}
inline float FitsHdu_FloatData::data(int index) const {
  // @@protoc_insertion_point(field_get:fits_proto.FitsHdu.FloatData.data)
  return _internal_data(index);
}
inline void FitsHdu_FloatData::set_data(int index, float value) {
  _impl_.data_.Set(index, value);
  // @@protoc_insertion_point(field_set:fits_proto.FitsHdu.FloatData.data)
}
inline void FitsHdu_FloatData::_internal_add_data(float value) {
  _impl_.data_.Add(value);
}
inline void FitsHdu_FloatData::add_data(float value) {
  _internal_add_data(value);
  // @@protoc_insertion_point(field_add:fits_proto.FitsHdu.FloatData.data)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
FitsHdu_FloatData::_internal_data() const {
  return _impl_.data_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
FitsHdu_FloatData::data() const {
  // @@protoc_insertion_point(field_list:fits_proto.FitsHdu.FloatData.data)
  return _internal_data();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
FitsHdu_FloatData::_internal_mutable_data() {
  return &_impl_.data_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
FitsHdu_FloatData::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:fits_proto.FitsHdu.FloatData.data)
  return _internal_mutable_data();
}

// -------------------------------------------------------------------

// FitsHdu_DoubleData

// repeated double data = 1;
inline int FitsHdu_DoubleData::_internal_data_size() const {
  return _impl_.data_.size();
}
inline int FitsHdu_DoubleData::data_size() const {
  return _internal_data_size();
}
inline void FitsHdu_DoubleData::clear_data() {
  _impl_.data_.Clear();
}
inline double FitsHdu_DoubleData::_internal_data(int index) const {
  return _impl_.data_.Get(index);
}
inline double FitsHdu_DoubleData::data(int index) const {
  // @@protoc_insertion_point(field_get:fits_proto.FitsHdu.DoubleData.data)
  return _internal_data(index);
}
inline void FitsHdu_DoubleData::set_data(int index, double value) {
  _impl_.data_.Set(index, value);
  // @@protoc_insertion_point(field_set:fits_proto.FitsHdu.DoubleData.data)
}
inline void FitsHdu_DoubleData::_internal_add_data(double value) {
  _impl_.data_.Add(value);
}
inline void FitsHdu_DoubleData::add_data(double value) {
  _internal_add_data(value);
  // @@protoc_insertion_point(field_add:fits_proto.FitsHdu.DoubleData.data)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
FitsHdu_DoubleData::_internal_data() const {
  return _impl_.data_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
FitsHdu_DoubleData::data() const {
  // @@protoc_insertion_point(field_list:fits_proto.FitsHdu.DoubleData.data)
  return _internal_data();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
FitsHdu_DoubleData::_internal_mutable_data() {
  return &_impl_.data_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
FitsHdu_DoubleData::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:fits_proto.FitsHdu.DoubleData.data)
  return _internal_mutable_data();
}

// -------------------------------------------------------------------

// FitsHdu_Int32Data

// repeated int32 data = 1;
inline int FitsHdu_Int32Data::_internal_data_size() const {
  return _impl_.data_.size();
}
inline int FitsHdu_Int32Data::data_size() const {
  return _internal_data_size();
}
inline void FitsHdu_Int32Data::clear_data() {
  _impl_.data_.Clear();
}
inline int32_t FitsHdu_Int32Data::_internal_data(int index) const {
  return _impl_.data_.Get(index);
}
inline int32_t FitsHdu_Int32Data::data(int index) const {
  // @@protoc_insertion_point(field_get:fits_proto.FitsHdu.Int32Data.data)
  return _internal_data(index);
}
inline void FitsHdu_Int32Data::set_data(int index, int32_t value) {
  _impl_.data_.Set(index, value);
  // @@protoc_insertion_point(field_set:fits_proto.FitsHdu.Int32Data.data)
}
inline void FitsHdu_Int32Data::_internal_add_data(int32_t value) {
  _impl_.data_.Add(value);
}
inline void FitsHdu_Int32Data::add_data(int32_t value) {
  _internal_add_data(value);
  // @@protoc_insertion_point(field_add:fits_proto.FitsHdu.Int32Data.data)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
FitsHdu_Int32Data::_internal_data() const {
  return _impl_.data_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
FitsHdu_Int32Data::data() const {
  // @@protoc_insertion_point(field_list:fits_proto.FitsHdu.Int32Data.data)
  return _internal_data();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
FitsHdu_Int32Data::_internal_mutable_data() {
  return &_impl_.data_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
FitsHdu_Int32Data::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:fits_proto.FitsHdu.Int32Data.data)
  return _internal_mutable_data();
}

// -------------------------------------------------------------------

// FitsHdu_Int64Data

// repeated int64 data = 1;
inline int FitsHdu_Int64Data::_internal_data_size() const {
  return _impl_.data_.size();
}
inline int FitsHdu_Int64Data::data_size() const {
  return _internal_data_size();
}
inline void FitsHdu_Int64Data::clear_data() {
  _impl_.data_.Clear();
}
inline int64_t FitsHdu_Int64Data::_internal_data(int index) const {
  return _impl_.data_.Get(index);
}
inline int64_t FitsHdu_Int64Data::data(int index) const {
  // @@protoc_insertion_point(field_get:fits_proto.FitsHdu.Int64Data.data)
  return _internal_data(index);
}
inline void FitsHdu_Int64Data::set_data(int index, int64_t value) {
  _impl_.data_.Set(index, value);
  // @@protoc_insertion_point(field_set:fits_proto.FitsHdu.Int64Data.data)
}
inline void FitsHdu_Int64Data::_internal_add_data(int64_t value) {
  _impl_.data_.Add(value);
}
inline void FitsHdu_Int64Data::add_data(int64_t value) {
  _internal_add_data(value);
  // @@protoc_insertion_point(field_add:fits_proto.FitsHdu.Int64Data.data)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
FitsHdu_Int64Data::_internal_data() const {
  return _impl_.data_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
FitsHdu_Int64Data::data() const {
  // @@protoc_insertion_point(field_list:fits_proto.FitsHdu.Int64Data.data)
  return _internal_data();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
FitsHdu_Int64Data::_internal_mutable_data() {
  return &_impl_.data_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
FitsHdu_Int64Data::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:fits_proto.FitsHdu.Int64Data.data)
  return _internal_mutable_data();
}

// -------------------------------------------------------------------

// FitsHdu_SInt32Data

// repeated sint32 data = 1;
inline int FitsHdu_SInt32Data::_internal_data_size() const {
  return _impl_.data_.size();
}
inline int FitsHdu_SInt32Data::data_size() const {
  return _internal_data_size();
}
inline void FitsHdu_SInt32Data::clear_data() {
  _impl_.data_.Clear();
}
inline int32_t FitsHdu_SInt32Data::_internal_data(int index) const {
  return _impl_.data_.Get(index);
}
inline int32_t FitsHdu_SInt32Data::data(int index) const {
  // @@protoc_insertion_point(field_get:fits_proto.FitsHdu.SInt32Data.data)
  return _internal_data(index);
}
inline void FitsHdu_SInt32Data::set_data(int index, int32_t value) {
  _impl_.data_.Set(index, value);
  // @@protoc_insertion_point(field_set:fits_proto.FitsHdu.SInt32Data.data)
}
inline void FitsHdu_SInt32Data::_internal_add_data(int32_t value) {
  _impl_.data_.Add(value);
}
inline void FitsHdu_SInt32Data::add_data(int32_t value) {
  _internal_add_data(value);
  // @@protoc_insertion_point(field_add:fits_proto.FitsHdu.SInt32Data.data)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
FitsHdu_SInt32Data::_internal_data() const {
  return _impl_.data_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
FitsHdu_SInt32Data::data() const {
  // @@protoc_insertion_point(field_list:fits_proto.FitsHdu.SInt32Data.data)
  return _internal_data();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
FitsHdu_SInt32Data::_internal_mutable_data() {
  return &_impl_.data_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
FitsHdu_SInt32Data::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:fits_proto.FitsHdu.SInt32Data.data)
  return _internal_mutable_data();
}

// -------------------------------------------------------------------

// FitsHdu_SInt64Data

// repeated sint64 data = 1;
inline int FitsHdu_SInt64Data::_internal_data_size() const {
  return _impl_.data_.size();
}
inline int FitsHdu_SInt64Data::data_size() const {
  return _internal_data_size();
}
inline void FitsHdu_SInt64Data::clear_data() {
  _impl_.data_.Clear();
}
inline int64_t FitsHdu_SInt64Data::_internal_data(int index) const {
  return _impl_.data_.Get(index);
}
inline int64_t FitsHdu_SInt64Data::data(int index) const {
  // @@protoc_insertion_point(field_get:fits_proto.FitsHdu.SInt64Data.data)
  return _internal_data(index);
}
inline void FitsHdu_SInt64Data::set_data(int index, int64_t value) {
  _impl_.data_.Set(index, value);
  // @@protoc_insertion_point(field_set:fits_proto.FitsHdu.SInt64Data.data)
}
inline void FitsHdu_SInt64Data::_internal_add_data(int64_t value) {
  _impl_.data_.Add(value);
}
inline void FitsHdu_SInt64Data::add_data(int64_t value) {
  _internal_add_data(value);
  // @@protoc_insertion_point(field_add:fits_proto.FitsHdu.SInt64Data.data)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
FitsHdu_SInt64Data::_internal_data() const {
  return _impl_.data_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
FitsHdu_SInt64Data::data() const {
  // @@protoc_insertion_point(field_list:fits_proto.FitsHdu.SInt64Data.data)
  return _internal_data();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
FitsHdu_SInt64Data::_internal_mutable_data() {
  return &_impl_.data_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
FitsHdu_SInt64Data::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:fits_proto.FitsHdu.SInt64Data.data)
  return _internal_mutable_data();
}

// -------------------------------------------------------------------

// FitsHdu

// repeated .fits_proto.FitsHeader header = 1;
inline int FitsHdu::_internal_header_size() const {
  return _impl_.header_.size();
}
inline int FitsHdu::header_size() const {
  return _internal_header_size();
}
inline void FitsHdu::clear_header() {
  _impl_.header_.Clear();
}
inline ::fits_proto::FitsHeader* FitsHdu::mutable_header(int index) {
  // @@protoc_insertion_point(field_mutable:fits_proto.FitsHdu.header)
  return _impl_.header_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fits_proto::FitsHeader >*
FitsHdu::mutable_header() {
  // @@protoc_insertion_point(field_mutable_list:fits_proto.FitsHdu.header)
  return &_impl_.header_;
}
inline const ::fits_proto::FitsHeader& FitsHdu::_internal_header(int index) const {
  return _impl_.header_.Get(index);
}
inline const ::fits_proto::FitsHeader& FitsHdu::header(int index) const {
  // @@protoc_insertion_point(field_get:fits_proto.FitsHdu.header)
  return _internal_header(index);
}
inline ::fits_proto::FitsHeader* FitsHdu::_internal_add_header() {
  return _impl_.header_.Add();
}
inline ::fits_proto::FitsHeader* FitsHdu::add_header() {
  ::fits_proto::FitsHeader* _add = _internal_add_header();
  // @@protoc_insertion_point(field_add:fits_proto.FitsHdu.header)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fits_proto::FitsHeader >&
FitsHdu::header() const {
  // @@protoc_insertion_point(field_list:fits_proto.FitsHdu.header)
  return _impl_.header_;
}

// .fits_proto.FitsHdu.FloatData float_data = 2;
inline bool FitsHdu::_internal_has_float_data() const {
  return payload_case() == kFloatData;
}
inline bool FitsHdu::has_float_data() const {
  return _internal_has_float_data();
}
inline void FitsHdu::set_has_float_data() {
  _impl_._oneof_case_[0] = kFloatData;
}
inline void FitsHdu::clear_float_data() {
  if (_internal_has_float_data()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.payload_.float_data_;
    }
    clear_has_payload();
  }
}
inline ::fits_proto::FitsHdu_FloatData* FitsHdu::release_float_data() {
  // @@protoc_insertion_point(field_release:fits_proto.FitsHdu.float_data)
  if (_internal_has_float_data()) {
    clear_has_payload();
    ::fits_proto::FitsHdu_FloatData* temp = _impl_.payload_.float_data_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.float_data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::fits_proto::FitsHdu_FloatData& FitsHdu::_internal_float_data() const {
  return _internal_has_float_data()
      ? *_impl_.payload_.float_data_
      : reinterpret_cast< ::fits_proto::FitsHdu_FloatData&>(::fits_proto::_FitsHdu_FloatData_default_instance_);
}
inline const ::fits_proto::FitsHdu_FloatData& FitsHdu::float_data() const {
  // @@protoc_insertion_point(field_get:fits_proto.FitsHdu.float_data)
  return _internal_float_data();
}
inline ::fits_proto::FitsHdu_FloatData* FitsHdu::unsafe_arena_release_float_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:fits_proto.FitsHdu.float_data)
  if (_internal_has_float_data()) {
    clear_has_payload();
    ::fits_proto::FitsHdu_FloatData* temp = _impl_.payload_.float_data_;
    _impl_.payload_.float_data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FitsHdu::unsafe_arena_set_allocated_float_data(::fits_proto::FitsHdu_FloatData* float_data) {
  clear_payload();
  if (float_data) {
    set_has_float_data();
    _impl_.payload_.float_data_ = float_data;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fits_proto.FitsHdu.float_data)
}
inline ::fits_proto::FitsHdu_FloatData* FitsHdu::_internal_mutable_float_data() {
  if (!_internal_has_float_data()) {
    clear_payload();
    set_has_float_data();
    _impl_.payload_.float_data_ = CreateMaybeMessage< ::fits_proto::FitsHdu_FloatData >(GetArenaForAllocation());
  }
  return _impl_.payload_.float_data_;
}
inline ::fits_proto::FitsHdu_FloatData* FitsHdu::mutable_float_data() {
  ::fits_proto::FitsHdu_FloatData* _msg = _internal_mutable_float_data();
  // @@protoc_insertion_point(field_mutable:fits_proto.FitsHdu.float_data)
  return _msg;
}

// .fits_proto.FitsHdu.DoubleData double_data = 3;
inline bool FitsHdu::_internal_has_double_data() const {
  return payload_case() == kDoubleData;
}
inline bool FitsHdu::has_double_data() const {
  return _internal_has_double_data();
}
inline void FitsHdu::set_has_double_data() {
  _impl_._oneof_case_[0] = kDoubleData;
}
inline void FitsHdu::clear_double_data() {
  if (_internal_has_double_data()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.payload_.double_data_;
    }
    clear_has_payload();
  }
}
inline ::fits_proto::FitsHdu_DoubleData* FitsHdu::release_double_data() {
  // @@protoc_insertion_point(field_release:fits_proto.FitsHdu.double_data)
  if (_internal_has_double_data()) {
    clear_has_payload();
    ::fits_proto::FitsHdu_DoubleData* temp = _impl_.payload_.double_data_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.double_data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::fits_proto::FitsHdu_DoubleData& FitsHdu::_internal_double_data() const {
  return _internal_has_double_data()
      ? *_impl_.payload_.double_data_
      : reinterpret_cast< ::fits_proto::FitsHdu_DoubleData&>(::fits_proto::_FitsHdu_DoubleData_default_instance_);
}
inline const ::fits_proto::FitsHdu_DoubleData& FitsHdu::double_data() const {
  // @@protoc_insertion_point(field_get:fits_proto.FitsHdu.double_data)
  return _internal_double_data();
}
inline ::fits_proto::FitsHdu_DoubleData* FitsHdu::unsafe_arena_release_double_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:fits_proto.FitsHdu.double_data)
  if (_internal_has_double_data()) {
    clear_has_payload();
    ::fits_proto::FitsHdu_DoubleData* temp = _impl_.payload_.double_data_;
    _impl_.payload_.double_data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FitsHdu::unsafe_arena_set_allocated_double_data(::fits_proto::FitsHdu_DoubleData* double_data) {
  clear_payload();
  if (double_data) {
    set_has_double_data();
    _impl_.payload_.double_data_ = double_data;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fits_proto.FitsHdu.double_data)
}
inline ::fits_proto::FitsHdu_DoubleData* FitsHdu::_internal_mutable_double_data() {
  if (!_internal_has_double_data()) {
    clear_payload();
    set_has_double_data();
    _impl_.payload_.double_data_ = CreateMaybeMessage< ::fits_proto::FitsHdu_DoubleData >(GetArenaForAllocation());
  }
  return _impl_.payload_.double_data_;
}
inline ::fits_proto::FitsHdu_DoubleData* FitsHdu::mutable_double_data() {
  ::fits_proto::FitsHdu_DoubleData* _msg = _internal_mutable_double_data();
  // @@protoc_insertion_point(field_mutable:fits_proto.FitsHdu.double_data)
  return _msg;
}

// .fits_proto.FitsHdu.Int32Data int32_data = 4;
inline bool FitsHdu::_internal_has_int32_data() const {
  return payload_case() == kInt32Data;
}
inline bool FitsHdu::has_int32_data() const {
  return _internal_has_int32_data();
}
inline void FitsHdu::set_has_int32_data() {
  _impl_._oneof_case_[0] = kInt32Data;
}
inline void FitsHdu::clear_int32_data() {
  if (_internal_has_int32_data()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.payload_.int32_data_;
    }
    clear_has_payload();
  }
}
inline ::fits_proto::FitsHdu_Int32Data* FitsHdu::release_int32_data() {
  // @@protoc_insertion_point(field_release:fits_proto.FitsHdu.int32_data)
  if (_internal_has_int32_data()) {
    clear_has_payload();
    ::fits_proto::FitsHdu_Int32Data* temp = _impl_.payload_.int32_data_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.int32_data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::fits_proto::FitsHdu_Int32Data& FitsHdu::_internal_int32_data() const {
  return _internal_has_int32_data()
      ? *_impl_.payload_.int32_data_
      : reinterpret_cast< ::fits_proto::FitsHdu_Int32Data&>(::fits_proto::_FitsHdu_Int32Data_default_instance_);
}
inline const ::fits_proto::FitsHdu_Int32Data& FitsHdu::int32_data() const {
  // @@protoc_insertion_point(field_get:fits_proto.FitsHdu.int32_data)
  return _internal_int32_data();
}
inline ::fits_proto::FitsHdu_Int32Data* FitsHdu::unsafe_arena_release_int32_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:fits_proto.FitsHdu.int32_data)
  if (_internal_has_int32_data()) {
    clear_has_payload();
    ::fits_proto::FitsHdu_Int32Data* temp = _impl_.payload_.int32_data_;
    _impl_.payload_.int32_data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FitsHdu::unsafe_arena_set_allocated_int32_data(::fits_proto::FitsHdu_Int32Data* int32_data) {
  clear_payload();
  if (int32_data) {
    set_has_int32_data();
    _impl_.payload_.int32_data_ = int32_data;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fits_proto.FitsHdu.int32_data)
}
inline ::fits_proto::FitsHdu_Int32Data* FitsHdu::_internal_mutable_int32_data() {
  if (!_internal_has_int32_data()) {
    clear_payload();
    set_has_int32_data();
    _impl_.payload_.int32_data_ = CreateMaybeMessage< ::fits_proto::FitsHdu_Int32Data >(GetArenaForAllocation());
  }
  return _impl_.payload_.int32_data_;
}
inline ::fits_proto::FitsHdu_Int32Data* FitsHdu::mutable_int32_data() {
  ::fits_proto::FitsHdu_Int32Data* _msg = _internal_mutable_int32_data();
  // @@protoc_insertion_point(field_mutable:fits_proto.FitsHdu.int32_data)
  return _msg;
}

// .fits_proto.FitsHdu.Int64Data int64_data = 5;
inline bool FitsHdu::_internal_has_int64_data() const {
  return payload_case() == kInt64Data;
}
inline bool FitsHdu::has_int64_data() const {
  return _internal_has_int64_data();
}
inline void FitsHdu::set_has_int64_data() {
  _impl_._oneof_case_[0] = kInt64Data;
}
inline void FitsHdu::clear_int64_data() {
  if (_internal_has_int64_data()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.payload_.int64_data_;
    }
    clear_has_payload();
  }
}
inline ::fits_proto::FitsHdu_Int64Data* FitsHdu::release_int64_data() {
  // @@protoc_insertion_point(field_release:fits_proto.FitsHdu.int64_data)
  if (_internal_has_int64_data()) {
    clear_has_payload();
    ::fits_proto::FitsHdu_Int64Data* temp = _impl_.payload_.int64_data_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.int64_data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::fits_proto::FitsHdu_Int64Data& FitsHdu::_internal_int64_data() const {
  return _internal_has_int64_data()
      ? *_impl_.payload_.int64_data_
      : reinterpret_cast< ::fits_proto::FitsHdu_Int64Data&>(::fits_proto::_FitsHdu_Int64Data_default_instance_);
}
inline const ::fits_proto::FitsHdu_Int64Data& FitsHdu::int64_data() const {
  // @@protoc_insertion_point(field_get:fits_proto.FitsHdu.int64_data)
  return _internal_int64_data();
}
inline ::fits_proto::FitsHdu_Int64Data* FitsHdu::unsafe_arena_release_int64_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:fits_proto.FitsHdu.int64_data)
  if (_internal_has_int64_data()) {
    clear_has_payload();
    ::fits_proto::FitsHdu_Int64Data* temp = _impl_.payload_.int64_data_;
    _impl_.payload_.int64_data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FitsHdu::unsafe_arena_set_allocated_int64_data(::fits_proto::FitsHdu_Int64Data* int64_data) {
  clear_payload();
  if (int64_data) {
    set_has_int64_data();
    _impl_.payload_.int64_data_ = int64_data;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fits_proto.FitsHdu.int64_data)
}
inline ::fits_proto::FitsHdu_Int64Data* FitsHdu::_internal_mutable_int64_data() {
  if (!_internal_has_int64_data()) {
    clear_payload();
    set_has_int64_data();
    _impl_.payload_.int64_data_ = CreateMaybeMessage< ::fits_proto::FitsHdu_Int64Data >(GetArenaForAllocation());
  }
  return _impl_.payload_.int64_data_;
}
inline ::fits_proto::FitsHdu_Int64Data* FitsHdu::mutable_int64_data() {
  ::fits_proto::FitsHdu_Int64Data* _msg = _internal_mutable_int64_data();
  // @@protoc_insertion_point(field_mutable:fits_proto.FitsHdu.int64_data)
  return _msg;
}

// .fits_proto.FitsHdu.SInt32Data sint32_data = 6;
inline bool FitsHdu::_internal_has_sint32_data() const {
  return payload_case() == kSint32Data;
}
inline bool FitsHdu::has_sint32_data() const {
  return _internal_has_sint32_data();
}
inline void FitsHdu::set_has_sint32_data() {
  _impl_._oneof_case_[0] = kSint32Data;
}
inline void FitsHdu::clear_sint32_data() {
  if (_internal_has_sint32_data()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.payload_.sint32_data_;
    }
    clear_has_payload();
  }
}
inline ::fits_proto::FitsHdu_SInt32Data* FitsHdu::release_sint32_data() {
  // @@protoc_insertion_point(field_release:fits_proto.FitsHdu.sint32_data)
  if (_internal_has_sint32_data()) {
    clear_has_payload();
    ::fits_proto::FitsHdu_SInt32Data* temp = _impl_.payload_.sint32_data_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.sint32_data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::fits_proto::FitsHdu_SInt32Data& FitsHdu::_internal_sint32_data() const {
  return _internal_has_sint32_data()
      ? *_impl_.payload_.sint32_data_
      : reinterpret_cast< ::fits_proto::FitsHdu_SInt32Data&>(::fits_proto::_FitsHdu_SInt32Data_default_instance_);
}
inline const ::fits_proto::FitsHdu_SInt32Data& FitsHdu::sint32_data() const {
  // @@protoc_insertion_point(field_get:fits_proto.FitsHdu.sint32_data)
  return _internal_sint32_data();
}
inline ::fits_proto::FitsHdu_SInt32Data* FitsHdu::unsafe_arena_release_sint32_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:fits_proto.FitsHdu.sint32_data)
  if (_internal_has_sint32_data()) {
    clear_has_payload();
    ::fits_proto::FitsHdu_SInt32Data* temp = _impl_.payload_.sint32_data_;
    _impl_.payload_.sint32_data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FitsHdu::unsafe_arena_set_allocated_sint32_data(::fits_proto::FitsHdu_SInt32Data* sint32_data) {
  clear_payload();
  if (sint32_data) {
    set_has_sint32_data();
    _impl_.payload_.sint32_data_ = sint32_data;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fits_proto.FitsHdu.sint32_data)
}
inline ::fits_proto::FitsHdu_SInt32Data* FitsHdu::_internal_mutable_sint32_data() {
  if (!_internal_has_sint32_data()) {
    clear_payload();
    set_has_sint32_data();
    _impl_.payload_.sint32_data_ = CreateMaybeMessage< ::fits_proto::FitsHdu_SInt32Data >(GetArenaForAllocation());
  }
  return _impl_.payload_.sint32_data_;
}
inline ::fits_proto::FitsHdu_SInt32Data* FitsHdu::mutable_sint32_data() {
  ::fits_proto::FitsHdu_SInt32Data* _msg = _internal_mutable_sint32_data();
  // @@protoc_insertion_point(field_mutable:fits_proto.FitsHdu.sint32_data)
  return _msg;
}

// .fits_proto.FitsHdu.SInt64Data sint64_data = 7;
inline bool FitsHdu::_internal_has_sint64_data() const {
  return payload_case() == kSint64Data;
}
inline bool FitsHdu::has_sint64_data() const {
  return _internal_has_sint64_data();
}
inline void FitsHdu::set_has_sint64_data() {
  _impl_._oneof_case_[0] = kSint64Data;
}
inline void FitsHdu::clear_sint64_data() {
  if (_internal_has_sint64_data()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.payload_.sint64_data_;
    }
    clear_has_payload();
  }
}
inline ::fits_proto::FitsHdu_SInt64Data* FitsHdu::release_sint64_data() {
  // @@protoc_insertion_point(field_release:fits_proto.FitsHdu.sint64_data)
  if (_internal_has_sint64_data()) {
    clear_has_payload();
    ::fits_proto::FitsHdu_SInt64Data* temp = _impl_.payload_.sint64_data_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.sint64_data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::fits_proto::FitsHdu_SInt64Data& FitsHdu::_internal_sint64_data() const {
  return _internal_has_sint64_data()
      ? *_impl_.payload_.sint64_data_
      : reinterpret_cast< ::fits_proto::FitsHdu_SInt64Data&>(::fits_proto::_FitsHdu_SInt64Data_default_instance_);
}
inline const ::fits_proto::FitsHdu_SInt64Data& FitsHdu::sint64_data() const {
  // @@protoc_insertion_point(field_get:fits_proto.FitsHdu.sint64_data)
  return _internal_sint64_data();
}
inline ::fits_proto::FitsHdu_SInt64Data* FitsHdu::unsafe_arena_release_sint64_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:fits_proto.FitsHdu.sint64_data)
  if (_internal_has_sint64_data()) {
    clear_has_payload();
    ::fits_proto::FitsHdu_SInt64Data* temp = _impl_.payload_.sint64_data_;
    _impl_.payload_.sint64_data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FitsHdu::unsafe_arena_set_allocated_sint64_data(::fits_proto::FitsHdu_SInt64Data* sint64_data) {
  clear_payload();
  if (sint64_data) {
    set_has_sint64_data();
    _impl_.payload_.sint64_data_ = sint64_data;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fits_proto.FitsHdu.sint64_data)
}
inline ::fits_proto::FitsHdu_SInt64Data* FitsHdu::_internal_mutable_sint64_data() {
  if (!_internal_has_sint64_data()) {
    clear_payload();
    set_has_sint64_data();
    _impl_.payload_.sint64_data_ = CreateMaybeMessage< ::fits_proto::FitsHdu_SInt64Data >(GetArenaForAllocation());
  }
  return _impl_.payload_.sint64_data_;
}
inline ::fits_proto::FitsHdu_SInt64Data* FitsHdu::mutable_sint64_data() {
  ::fits_proto::FitsHdu_SInt64Data* _msg = _internal_mutable_sint64_data();
  // @@protoc_insertion_point(field_mutable:fits_proto.FitsHdu.sint64_data)
  return _msg;
}

inline bool FitsHdu::has_payload() const {
  return payload_case() != PAYLOAD_NOT_SET;
}
inline void FitsHdu::clear_has_payload() {
  _impl_._oneof_case_[0] = PAYLOAD_NOT_SET;
}
inline FitsHdu::PayloadCase FitsHdu::payload_case() const {
  return FitsHdu::PayloadCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// Fits

// repeated .fits_proto.FitsHdu hdu = 1;
inline int Fits::_internal_hdu_size() const {
  return _impl_.hdu_.size();
}
inline int Fits::hdu_size() const {
  return _internal_hdu_size();
}
inline void Fits::clear_hdu() {
  _impl_.hdu_.Clear();
}
inline ::fits_proto::FitsHdu* Fits::mutable_hdu(int index) {
  // @@protoc_insertion_point(field_mutable:fits_proto.Fits.hdu)
  return _impl_.hdu_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fits_proto::FitsHdu >*
Fits::mutable_hdu() {
  // @@protoc_insertion_point(field_mutable_list:fits_proto.Fits.hdu)
  return &_impl_.hdu_;
}
inline const ::fits_proto::FitsHdu& Fits::_internal_hdu(int index) const {
  return _impl_.hdu_.Get(index);
}
inline const ::fits_proto::FitsHdu& Fits::hdu(int index) const {
  // @@protoc_insertion_point(field_get:fits_proto.Fits.hdu)
  return _internal_hdu(index);
}
inline ::fits_proto::FitsHdu* Fits::_internal_add_hdu() {
  return _impl_.hdu_.Add();
}
inline ::fits_proto::FitsHdu* Fits::add_hdu() {
  ::fits_proto::FitsHdu* _add = _internal_add_hdu();
  // @@protoc_insertion_point(field_add:fits_proto.Fits.hdu)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fits_proto::FitsHdu >&
Fits::hdu() const {
  // @@protoc_insertion_point(field_list:fits_proto.Fits.hdu)
  return _impl_.hdu_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace fits_proto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_fits_2eproto
